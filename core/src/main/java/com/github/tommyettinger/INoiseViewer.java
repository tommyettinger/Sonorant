package com.github.tommyettinger;

import com.badlogic.gdx.Application;
import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputAdapter;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.graphics.PixmapIO;
import com.badlogic.gdx.graphics.glutils.ImmediateModeRenderer20;
import com.badlogic.gdx.graphics.glutils.ShaderProgram;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.utils.UIUtils;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.Clipboard;
import com.badlogic.gdx.utils.ScreenUtils;
import com.badlogic.gdx.utils.TimeUtils;
import com.badlogic.gdx.utils.viewport.ScreenViewport;
import com.badlogic.gdx.utils.viewport.Viewport;
import com.github.tommyettinger.anim8.*;
import com.github.tommyettinger.digital.*;
import com.github.tommyettinger.ds.ObjectList;
import com.github.yellowstonegames.grid.*;

import static com.badlogic.gdx.Input.Keys.*;
import static com.badlogic.gdx.graphics.GL20.GL_POINTS;
import static com.github.tommyettinger.digital.MathTools.floor;
import static com.github.tommyettinger.digital.MathTools.fract;

/**
 */
public class INoiseViewer extends ApplicationAdapter {

    public static final int width = 350, height = 350;
//    public static final int width = 512, height = 512;
//    public static final int width = 256, height = 256;
//    public static final int width = 64, height = 64;

    private final INoise[] noises = new INoise[]{new CyclicNoise(1234567890L, 3), new CyclicNoise(1234567890L, 4), new CyclicNoise(1234567890L, 5),
            new SorbetNoise(1234567890L, 5), new SorbetNoise(1234567890L, 4), new SorbetNoise(1234567890L, 3),
            new FlanNoise(1234567890L, 4), new TaffyNoise(1234567890L, 4), new FoamplexNoise(1234567890L),
            new FoamNoise(1234567890L), new HoneyNoise(1234567890L), new PerlinNoise(1234567890L), new SimplexNoise(1234567890L),
            new SnakeNoise(1234567890L), new BadgerNoise(1234567890L), new ValueNoise(1234567890L)
    };
    private int noiseIndex = 15;
    private final NoiseWrapper noise = new NoiseWrapper(noises[noiseIndex], 1234567890L, 0.0625f, 2, 1);
    private final Noise varianceNoise = new Noise(-1, 0.025f, Noise.VALUE);
    private final ObjectList<Interpolations.Interpolator> interpolators = new ObjectList<>(Interpolations.getInterpolatorArray());
    private int interpolatorIndex = 58;
    private Interpolations.Interpolator interpolator = interpolators.get(interpolatorIndex);
    private float hue = 0;
    private float variance = 1f;
    private float hard = 0f;
    private float saturation = 1f;
    private int divisions = 2;
    private int octaves = 0;
    private float freq = 0.125f;
    private float a = 1f;
    private float b = 1f;
    private boolean paused;
    private boolean hueCycle = false;

    private final ObjectList<Vector2> centers =
//            ObjectList.with(new Vector2((width-1) * 0.5f, (height-1) * 0.5f));
            ObjectList.with(new Vector2((width-1) / 3f, (height-1) * 0.5f), new Vector2((width-1) * 2f / 3f, (height-1) * 0.5f));

    private ImmediateModeRenderer20 renderer;

    private Clipboard clipboard;

//    private IntList colorList = new IntList(256);
//    private float[] colorFloats = new float[256];

    private Viewport view;
    private long startTime;

    private AnimatedGif gif;
//    private AnimatedPNG apng;
    private FastPNG png;
    private final Array<Pixmap> frames = new Array<>(256);

    public static float basicPrepare(float n)
    {
        return n * 0.5f + 0.5f;
    }

    public static int rgba8888 (float r, float g, float b, float a) {
        return ((int)(r * 255.999f) << 24) | ((int)(g * 255.999f) << 16) | ((int)(b * 255.999f) << 8) | (int)(a * 127.999f) << 1;
    }
    /**
     * Converts the four HSLA components, each in the 0.0 to 1.0 range, to an int in RGBA8888 format.
     * I brought this over from colorful-gdx's FloatColors class. I can't recall where I got the original HSL(A) code
     * from, but there's a strong chance it was written by cypherdare/cyphercove for their color space comparison.
     * It also includes a change to the hue (the fractional part of {@code h}) so cyan is less frequent and orange is
     * more frequent.
     *
     * @param h hue, usually from 0.0 to 1.0, but only the fractional part is used
     * @param s saturation, from 0.0 to 1.0
     * @param l lightness, from 0.0 to 1.0
     * @param a alpha, from 0.0 to 1.0
     * @return an RGBA8888-format int
     */
    public static int hsl2rgb(final float h, final float s, final float l, final float a) {
        // note: the spline is used here to change hue distribution so there's more orange, less cyan.
//        final float hue = (float) Math.pow((h - MathUtils.floor(h)) * 0.8f + 0.225f, 2f) - 0.050625f;
        final float hue = MathTools.barronSpline(h - MathUtils.floor(h), 1.7f, 0.9f);
        float x = Math.min(Math.max(Math.abs(hue * 6f - 3f) - 1f, 0f), 1f);
        float y = hue + (2f / 3f);
        float z = hue + (1f / 3f);
        y -= (int) y;
        z -= (int) z;
        y = Math.min(Math.max(Math.abs(y * 6f - 3f) - 1f, 0f), 1f);
        z = Math.min(Math.max(Math.abs(z * 6f - 3f) - 1f, 0f), 1f);
        float v = (l + Math.min(Math.max(s, 0f), 1f) * Math.min(l, 1f - l));
        float d = 2f * (1f - l / (v + 1e-10f));
        return rgba8888(v * MathUtils.lerp(1f, x, d), v * MathUtils.lerp(1f, y, d), v * MathUtils.lerp(1f, z, d), a);
    }

//    static {
//        // this one has some duplicates and doesn't cover RGB space (or Oklab) well. Aesthetically interesting, though!
//        int[] BIG_CAL = new int[] {
//                0x00000000, 0x0E0D0FFF, 0x101112FF, 0x151515FF, 0x171615FF, 0x181819FF, 0x191819FF, 0x1C1A1AFF,
//                0x1B1B1CFF, 0x1C1C1DFF, 0x1C1C1DFF, 0x1D1D1EFF, 0x1E1E1EFF, 0x202020FF, 0x222122FF, 0x2B2929FF,
//                0x353735FF, 0x383839FF, 0x3A3D3CFF, 0x3C3D3CFF, 0x3C3D3BFF, 0x3D3C3DFF, 0x3C3E3EFF, 0x3D3F3FFF,
//                0x3F3F3EFF, 0x3E403FFF, 0x403F41FF, 0x3F403FFF, 0x41403EFF, 0x3F4242FF, 0x434545FF, 0x444544FF,
//                0x484745FF, 0x464848FF, 0x47494AFF, 0x484A49FF, 0x494B4AFF, 0x4B4C4BFF, 0x4B4C4BFF, 0x4B4C4EFF,
//                0x4E4E4CFF, 0x535555FF, 0x545657FF, 0x888A8BFF, 0x939290FF, 0x909394FF, 0x939394FF, 0x919493FF,
//                0x979898FF, 0x9A9797FF, 0x969A9AFF, 0x989A98FF, 0x9A9998FF, 0x9B9C9DFF, 0x9E9E9CFF, 0x9D9DA0FF,
//                0x9E9E9BFF, 0x9C9F9FFF, 0x9EA2A3FF, 0xA2A2A3FF, 0xA0A3A3FF, 0xA1A3A2FF, 0xA2A2A5FF, 0xA1A4A4FF,
//                0xA2A4A2FF, 0xA2A5A4FF, 0xA2A6A5FF, 0xA7AAA9FF, 0xAAADADFF, 0x35131FFF, 0xD31568FF, 0x65474EFF,
//                0x410A1FFF, 0x420A20FF, 0xC63562FF, 0x804754FF, 0x632C39FF, 0xCA1E58FF, 0x5A1D2CFF, 0xE82160FF,
//                0xCB6076FF, 0x3A0C19FF, 0xCD4163FF, 0x290D13FF, 0xCB4763FF, 0xCE3F5EFF, 0xD33158FF, 0xD6516AFF,
//                0x4E111FFF, 0x420918FF, 0xDC405FFF, 0xC75667FF, 0x674A4CFF, 0xD23E59FF, 0xCE2D4FFF, 0x523B3DFF,
//                0x78373FFF, 0x6A343AFF, 0xDE2B51FF, 0xDF264EFF, 0xE22E51FF, 0x3F171CFF, 0xD54A5BFF, 0xC4163CFF,
//                0xE31042FF, 0xD23C4FFF, 0xCD5861FF, 0xC5525CFF, 0x853E43FF, 0x8C4247FF, 0x822C34FF, 0x852E36FF,
//                0xDF2745FF, 0x763136FF, 0x451319FF, 0xC03F4AFF, 0xD71A3BFF, 0xCF293FFF, 0xC93E4AFF, 0x6A3738FF,
//                0xC53E45FF, 0xDA464CFF, 0x7A4D4CFF, 0x421416FF, 0x5C2F2EFF, 0xE24B4FFF, 0xD3172DFF, 0xC23037FF,
//                0x812729FF, 0x804340FF, 0xCE3136FF, 0xCB1E2CFF, 0xDD2631FF, 0xDB1D2CFF, 0x8C3B38FF, 0xD9252EFF,
//                0xEB5450FF, 0x7E4541FF, 0xD63134FF, 0xD54844FF, 0x80413CFF, 0xD4504AFF, 0x6C2D29FF, 0x753D38FF,
//                0x704E4AFF, 0xCA3B35FF, 0xED3E37FF, 0xE22F2BFF, 0x8A4841FF, 0x9C3F37FF, 0x722E28FF, 0xCE5044FF,
//                0xF65A4AFF, 0xD64234FF, 0x7E3E34FF, 0x7F4137FF, 0x723E34FF, 0x8B4A3EFF, 0x8D3E30FF, 0xE83914FF,
//                0x874A3CFF, 0x79493EFF, 0x28150FFF, 0x6A463CFF, 0x753929FF, 0xD15A39FF, 0x784738FF, 0xD8491CFF,
//                0xA0401FFF, 0x894028FF, 0x894126FF, 0x944A2DFF, 0xFF8453FF, 0xFAA786FF, 0x864328FF, 0x7F4932FF,
//                0x69331CFF, 0xE9A080FF, 0x7A452EFF, 0x8F4826FF, 0xF4A581FF, 0x7A3F22FF, 0xFF9053FF, 0x7C5037FF,
//                0x70503CFF, 0xDF7F41FF, 0x884D26FF, 0x654C3DFF, 0xEC945AFF, 0xE78741FF, 0xD9915FFF, 0xCB9D7CFF,
//                0xE18E51FF, 0x6C4E38FF, 0xD59E76FF, 0xE78534FF, 0xF9AD74FF, 0x744926FF, 0xF58924FF, 0xE68631FF,
//                0xE6B083FF, 0xE39144FF, 0xF39437FF, 0xE0A875FF, 0xD48E4AFF, 0xF79938FF, 0xD09762FF, 0xE9B27CFF,
//                0xF5B879FF, 0xF8B267FF, 0xE79B47FF, 0xE29D50FF, 0xFEB25BFF, 0xE5A75FFF, 0xEFAD5FFF, 0xF1AC5BFF,
//                0x4E3D29FF, 0xEFBB79FF, 0xFDB456FF, 0xF1BA74FF, 0xFEBB64FF, 0xE2A859FF, 0xF9C276FF, 0xEAA331FF,
//                0xEEAB40FF, 0xEBB96DFF, 0xE1A339FF, 0xEDCA90FF, 0xE2B158FF, 0xC7A057FF, 0xD8A543FF, 0xDFB86FFF,
//                0xE5B755FF, 0xE6C37CFF, 0xDCBB74FF, 0x453C28FF, 0xD0B266FF, 0xCEAB50FF, 0xE7BB36FF, 0xDEBD58FF,
//                0x524D2CFF, 0x666344FF, 0x9C9878FF, 0x403C10FF, 0x4A4935FF, 0x494928FF, 0x919264FF, 0x48482BFF,
//                0xFBFDBEFF, 0x93947BFF, 0x616230FF, 0x3E3E0BFF, 0x989B28FF, 0x8B8F24FF, 0x3D3F28FF, 0x454821FF,
//                0x43462EFF, 0x858F13FF, 0x8B953BFF, 0x939D56FF, 0x89981AFF, 0x3A3E27FF, 0x7D8D0DFF, 0x434929FF,
//                0x8DA22DFF, 0xACB68FFF, 0x869A46FF, 0x383D28FF, 0x7E9726FF, 0x38421EFF, 0x85A328FF, 0x90B034FF,
//                0x88A446FF, 0x373F25FF, 0xA3BB70FF, 0x799532FF, 0x82A712FF, 0x85AB1EFF, 0xA0AA8EFF, 0x85AE1FFF,
//                0x3A4525FF, 0x83A442FF, 0x7E9F40FF, 0x88A94DFF, 0x424A36FF, 0x98BD59FF, 0x36441FFF, 0x7BA434FF,
//                0x7BAA25FF, 0x3F4A30FF, 0x789F3BFF, 0x95A67FFF, 0x7CA04AFF, 0x7FAD37FF, 0x84B33EFF, 0x7AAC2CFF,
//                0x343D29FF, 0x8CB752FF, 0x749745FF, 0x7AAD2CFF, 0x74A036FF, 0x74A825FF, 0x9BB57EFF, 0x7CAA3DFF,
//                0x4C5642FF, 0x3C5023FF, 0x70A035FF, 0x3C5026FF, 0x76AA3AFF, 0x79AD3DFF, 0x88A56EFF, 0x58881AFF,
//                0x6AA61CFF, 0x76A644FF, 0x36402EFF, 0x82AE58FF, 0x80AF50FF, 0x6CA629FF, 0x73A73EFF, 0x69AC0FFF,
//                0x34491FFF, 0x70994AFF, 0x9BA890FF, 0x749E4FFF, 0x77A949FF, 0x416817FF, 0x5F9030FF, 0x6BAD22FF,
//                0x75A24EFF, 0x729D4EFF, 0x6AA431FF, 0x78A94EFF, 0x546A44FF, 0x7DAD57FF, 0x69AB2AFF, 0x70B62DFF,
//                0x79B449FF, 0x6DA937FF, 0x66AF18FF, 0x6FA344FF, 0x72A34BFF, 0x74A54FFF, 0x384B29FF, 0x3B4F2CFF,
//                0x3E6221FF, 0x72AC46FF, 0x7AA35EFF, 0x27381BFF, 0x5DA41BFF, 0x5C9D25FF, 0x75A754FF, 0x5FAD18FF,
//                0x6CC220FF, 0x3F4E36FF, 0x67AA35FF, 0x6AB72DFF, 0x6EA14CFF, 0x9DAD93FF, 0x6FAE43FF, 0x77A35BFF,
//                0x6AA93EFF, 0x5D9A32FF, 0x6BAC3FFF, 0x66B52CFF, 0x2C411EFF, 0x67A93DFF, 0x3D6228FF, 0x5FA035FF,
//                0x6CB33FFF, 0x4F9911FF, 0x64A240FF, 0x2E4323FF, 0x3C552FFF, 0x68B43AFF, 0x69A448FF, 0x354E28FF,
//                0x69B43FFF, 0x6CB544FF, 0x73B054FF, 0x58A52DFF, 0x376121FF, 0x5DAA34FF, 0x54A226FF, 0x6BB149FF,
//                0x5CA736FF, 0x5A9A3CFF, 0x52A623FF, 0x50AE16FF, 0x365429FF, 0x5BA837FF, 0x35681BFF, 0x374432FF,
//                0x69BC46FF, 0x34432FFF, 0x40523AFF, 0x3F5C35FF, 0x3C5035FF, 0x61B542FF, 0x598C47FF, 0x58B534FF,
//                0x306919FF, 0x62A14DFF, 0x6CAB56FF, 0x50A730FF, 0x356523FF, 0x42A612FF, 0x5EB63FFF, 0x366B24FF,
//                0x3C4C37FF, 0x5FAF45FF, 0x63B349FF, 0x589E41FF, 0x609F4DFF, 0x50A733FF, 0x2A4921FF, 0x64B44DFF,
//                0x5EAE47FF, 0x72A664FF, 0x66A454FF, 0x45A826FF, 0x5EAB4BFF, 0x2C5222FF, 0x49AD2FFF, 0x3B5C34FF,
//                0x57B73FFF, 0x56AE41FF, 0x70A963FF, 0x68AD59FF, 0x84B579FF, 0x2F4729FF, 0x4DB634FF, 0x64B951FF,
//                0x6CA760FF, 0x8EB585FF, 0x4CC82FFF, 0x699E5EFF, 0x2B4426FF, 0x3C6A33FF, 0x3A6233FF, 0x60A554FF,
//                0x6CB260FF, 0x5CB54EFF, 0x4A6345FF, 0x54C143FF, 0x47BA38FF, 0x3B5238FF, 0x6AA362FF, 0x51A348FF,
//                0x5FA857FF, 0x58A450FF, 0x56AC4DFF, 0x4A9E42FF, 0x64AC5DFF, 0x47BA3EFF, 0x62B25BFF, 0x53AC4CFF,
//                0x4CA846FF, 0x55A04FFF, 0x88BE83FF, 0x62A85EFF, 0x20C722FF, 0x44AA41FF, 0x49B547FF, 0x384737FF,
//                0x5CAA5AFF, 0x4AB34AFF, 0x4FAB4FFF, 0x284928FF, 0x49B14CFF, 0x56A257FF, 0x35AE3EFF, 0x88B288FF,
//                0x4CAD50FF, 0x59BE5CFF, 0x3C5F3CFF, 0x85C084FF, 0x385838FF, 0x34B63FFF, 0x59B05CFF, 0x4EAE53FF,
//                0x10AE2EFF, 0x49A84FFF, 0x43A94BFF, 0x2A682FFF, 0x5DAC62FF, 0x295B2DFF, 0x88A188FF, 0x3DA549FF,
//                0x4AA052FF, 0x84C088FF, 0x45BF55FF, 0x97B498FF, 0x36663AFF, 0x44AE52FF, 0x2EA543FF, 0x254F29FF,
//                0x55B960FF, 0x27412AFF, 0x58B063FF, 0x31A446FF, 0x2F6637FF, 0x316639FF, 0x48C860FF, 0x59B868FF,
//                0x52BE66FF, 0x32AF50FF, 0x38533BFF, 0x44C963FF, 0x3FB65BFF, 0x2D4631FF, 0x4BB062FF, 0x335B3BFF,
//                0x324535FF, 0x7BA482FF, 0x89BA92FF, 0x017131FF, 0x2EC660FF, 0x2E4934FF, 0x2E4B34FF, 0x4FAC67FF,
//                0x3CA75BFF, 0x236235FF, 0x3AB05EFF, 0x86B690FF, 0x8EC89BFF, 0x34533CFF, 0x76B585FF, 0x60C57CFF,
//                0x216638FF, 0x23B35AFF, 0x4AA464FF, 0x62A272FF, 0x17B357FF, 0x314736FF, 0x29AE5AFF, 0x235332FF,
//                0x2C5437FF, 0x3FB266FF, 0x37A55EFF, 0x385540FF, 0x1BA054FF, 0x42C471FF, 0x2A4B34FF, 0x1D492CFF,
//                0x4BBA72FF, 0x49C577FF, 0x40B96EFF, 0x375F44FF, 0x8DBE9BFF, 0x7AB88DFF, 0x31B066FF, 0x244830FF,
//                0x365C43FF, 0x204F32FF, 0x1B5332FF, 0x324538FF, 0x2E553CFF, 0x7DA389FF, 0x0A4326FF, 0x18643BFF,
//                0x739F82FF, 0x33A165FF, 0x3CC37AFF, 0x1DB96DFF, 0x195133FF, 0x28B56EFF, 0x17492FFF, 0x126C41FF,
//                0x37AB6EFF, 0x36C47BFF, 0x314639FF, 0x2FC47AFF, 0x294234FF, 0x195336FF, 0x04AB67FF, 0x71CA97FF,
//                0x3CB275FF, 0x175537FF, 0x04683FFF, 0x1A5A3AFF, 0x19B46FFF, 0x3AAF74FF, 0x41B178FF, 0x89B299FF,
//                0x355A45FF, 0x52BE87FF, 0x68C895FF, 0x849F8FFF, 0x2E694BFF, 0x134A31FF, 0x2A553FFF, 0x236044FF,
//                0x71C399FF, 0x8AB69EFF, 0x336049FF, 0x225E43FF, 0x085639FF, 0x2C4E3DFF, 0x2D6048FF, 0x41C188FF,
//                0x8EC7A9FF, 0x124B34FF, 0x234E3AFF, 0x6EC49BFF, 0x234334FF, 0x254E3BFF, 0x70C79DFF, 0x276047FF,
//                0x33C68BFF, 0x2A5B45FF, 0x2B513FFF, 0x36B380FF, 0x37B281FF, 0x81AB97FF, 0x1E4C39FF, 0x1B4A38FF,
//                0x3EC591FF, 0x3B5F4FFF, 0x04422EFF, 0x175E44FF, 0x205742FF, 0x254C3CFF, 0x254E3EFF, 0x67CEA6FF,
//                0x1D4F3DFF, 0x73C7A6FF, 0x5AA78AFF, 0x6EBA9CFF, 0x84A899FF, 0x295646FF, 0x63BC9CFF, 0x0F6950FF,
//                0x94CEB8FF, 0x1B4738FF, 0x53B795FF, 0x73C4A6FF, 0x98BAACFF, 0x144A39FF, 0x8CB8A7FF, 0x2D5849FF,
//                0x2B5A4BFF, 0x1B6751FF, 0x366656FF, 0x6AC0A3FF, 0x44C09BFF, 0x27BB93FF, 0x6CB49CFF, 0x72C5AAFF,
//                0x25604FFF, 0x72B59FFF, 0x13493BFF, 0x205848FF, 0x52B597FF, 0x7AB7A3FF, 0x9FCEBEFF, 0x73BDA5FF,
//                0x85A89CFF, 0x5FC0A3FF, 0x50C3A3FF, 0x276655FF, 0x70D2B4FF, 0x285347FF, 0x27594BFF, 0x39C19FFF,
//                0x6BBEA6FF, 0x095A49FF, 0x6FB7A2FF, 0x81BBAAFF, 0x82B2A4FF, 0x67B9A3FF, 0x63CAAFFF, 0x1E5547FF,
//                0x56C4A9FF, 0x415F57FF, 0x085042FF, 0x1B594BFF, 0x51C5A9FF, 0x71BCA8FF, 0x83ADA1FF, 0x395850FF,
//                0x7CC2B1FF, 0x6ABEAAFF, 0x67CBB4FF, 0x65BDA8FF, 0x20473EFF, 0x1E564AFF, 0x4EC7AEFF, 0x83B2A7FF,
//                0x82D1BFFF, 0x43B49DFF, 0x82D1BFFF, 0x1F5E51FF, 0x4EC6AEFF, 0x304A44FF, 0x6AC9B6FF, 0x2DC2ABFF,
//                0x2C4D47FF, 0x26544CFF, 0x18554BFF, 0x73CABAFF, 0x2C524BFF, 0x7ABBAFFF, 0x53BBABFF, 0x27564FFF,
//                0x1F6157FF, 0x58CDBBFF, 0x2FC5B1FF, 0x64B5A7FF, 0x235C54FF, 0x79C7BCFF, 0x106057FF, 0x1FC0B1FF,
//                0x729E97FF, 0x70AFA6FF, 0x355551FF, 0x5DCCC0FF, 0x254541FF, 0x3D5854FF, 0x315F5AFF, 0x25605AFF,
//                0x10BCAEFF, 0x225D57FF, 0x13534DFF, 0x264744FF, 0x5CC3BAFF, 0x124945FF, 0x234B48FF, 0x2E504DFF,
//                0x84B8B3FF, 0x6CBFB8FF, 0x3EBAB1FF, 0x2D4D4AFF, 0x33504DFF, 0x59BBB4FF, 0x54B4ADFF, 0x5DBDB6FF,
//                0x78B4AFFF, 0x236461FF, 0x095A56FF, 0x1AC8C1FF, 0x64B7B2FF, 0x71C0BBFF, 0x4ABEB9FF, 0x225350FF,
//                0x215452FF, 0x185A59FF, 0x1C5654FF, 0x38615FFF, 0x0C5958FF, 0x34C0BDFF, 0x66C8C6FF, 0x3FC6C5FF,
//                0x8CB7B6FF, 0x114A4AFF, 0x659E9EFF, 0x7FB2B1FF, 0x1D5151FF, 0x7CB4B4FF, 0x73AAAAFF, 0x1F5253FF,
//                0x63B2B3FF, 0x70A5A7FF, 0x74ADAFFF, 0x82A6A7FF, 0x48CBD1FF, 0x81CACDFF, 0x8CB8BAFF, 0x79A1A3FF,
//                0x35BFC6FF, 0x1B4D50FF, 0x2F5354FF, 0x60C8CEFF, 0x6BBBC0FF, 0x215659FF, 0x24585BFF, 0x254D50FF,
//                0x6DB5BAFF, 0x61B3B9FF, 0x345659FF, 0x2A5559FF, 0x609FA5FF, 0x67A2A8FF, 0x36BECBFF, 0x5EA9B1FF,
//                0x6BA8AFFF, 0x6AC3CEFF, 0x7FBCC4FF, 0x155962FF, 0x79ABB1FF, 0x75B4BDFF, 0x4AB7C5FF, 0x1D5A62FF,
//                0x68A5AEFF, 0x79AFB7FF, 0x47CADFFF, 0x365257FF, 0x709BA2FF, 0x7DC5D3FF, 0x6CB0BDFF, 0x36555BFF,
//                0x89ACB3FF, 0x63BACDFF, 0x6797A2FF, 0x66ACBBFF, 0x1EB5D2FF, 0x64ADBEFF, 0x619DACFF, 0x065A6AFF,
//                0x31555FFF, 0x145969FF, 0x7DB2C0FF, 0x21B2D5FF, 0x5DABC1FF, 0x3DBEDFFF, 0x4A9EB6FF, 0x55A6BDFF,
//                0x2FBFE5FF, 0x42C1E3FF, 0x63B8D2FF, 0x699AA9FF, 0x7CB7CBFF, 0x365863FF, 0x6EABBFFF, 0x34C7F3FF,
//                0x1E6175FF, 0x7B9EABFF, 0x7CB3C8FF, 0x49A0BFFF, 0x34A7D0FF, 0x79ACC0FF, 0x7B9BA7FF, 0x67BADAFF,
//                0x145E77FF, 0x6DB1CCFF, 0x7DABBDFF, 0x2B4A57FF, 0x2BB5E7FF, 0x73A4B9FF, 0x5BBAE2FF, 0x365F71FF,
//                0x53AED6FF, 0x6EAAC5FF, 0x76B4D1FF, 0x75A2B8FF, 0x6097B1FF, 0x87B0C4FF, 0x7AA0B2FF, 0x6CB1D2FF,
//                0x6E93A5FF, 0x7ABEDEFF, 0x79A4BAFF, 0x7AB7D6FF, 0x61BBEAFF, 0x689DB9FF, 0x285269FF, 0x2B5267FF,
//                0x8FA9B9FF, 0x65A9D0FF, 0x789BB0FF, 0x619CC1FF, 0x70A7CAFF, 0x7AAAC9FF, 0x67AEDCFF, 0x6BB1DFFF,
//                0x55B1ECFF, 0x59A7DCFF, 0x80A8C4FF, 0x051722FF, 0x86A2B9FF, 0x80A1BCFF, 0x90ADC7FF, 0x7FA8CCFF,
//                0x849BAFFF, 0x6DACE9FF, 0x8AA3BDFF, 0x6BA2DEFF, 0x7EA7D4FF, 0x8193A7FF, 0x93A3BAFF, 0x304C72FF,
//                0x0D1C31FF, 0x95A6C0FF, 0x849FCBFF, 0x8599B8FF, 0x7B9CD3FF, 0x3D5071FF, 0x8199C4FF, 0x2D4271FF,
//                0x899DC6FF, 0x283C7BFF, 0x0C1226FF, 0x3C4665FF, 0x8F9ECBFF, 0x909CBFFF, 0x818DB6FF, 0x929BBFFF,
//                0x96A1D4FF, 0x99A1CEFF, 0x959BC1FF, 0x060313FF, 0x111129FF, 0x191740FF, 0x999BD2FF, 0x8B8CB2FF,
//                0x2C284EFF, 0x9391B5FF, 0x9691C6FF, 0xA9A4D6FF, 0x9C98BBFF, 0xA39BD0FF, 0x160A2FFF, 0xA297D0FF,
//                0x37295CFF, 0x382A5BFF, 0xA798D1FF, 0x211534FF, 0x150D21FF, 0x1D122CFF, 0x2C2537FF, 0x241B32FF,
//                0x261D33FF, 0x2A1840FF, 0x1E112BFF, 0x17111EFF, 0x0F0217FF, 0x1F122AFF, 0x20132AFF, 0x1C062BFF,
//                0x322240FF, 0x251631FF, 0xA487BDFF, 0x170920FF, 0xB39EC4FF, 0x1C042AFF, 0x1F062EFF, 0x211828FF,
//                0x271930FF, 0x291035FF, 0x2B0D39FF, 0x351F3FFF, 0x32183CFF, 0x510B68FF, 0x1F1124FF, 0x281B2BFF,
//                0x250A2CFF, 0x17071BFF, 0x1A001FFF, 0x36183CFF, 0x4D1458FF, 0x3F1947FF, 0x341C38FF, 0x491F50FF,
//                0x290F2EFF, 0x36183AFF, 0x201322FF, 0x230926FF, 0x522057FF, 0x1F0422FF, 0x2A092DFF, 0x29142AFF,
//                0x3C1E3DFF, 0x291C29FF, 0x271627FF, 0x230B24FF, 0x200C20FF, 0x230E23FF, 0x290729FF, 0x54174FFF,
//                0x451D41FF, 0x4D1B48FF, 0x3E1C3AFF, 0x533E4FFF, 0x3E1739FF, 0x2E142BFF, 0x3C1637FF, 0x2B1328FF,
//                0x4D1747FF, 0x2E172AFF, 0x3B1E36FF, 0x55194BFF, 0x210C1DFF, 0x3F1336FF, 0x3D0F34FF, 0x22101EFF,
//                0x251621FF, 0x512046FF, 0x49163EFF, 0x5E224FFF, 0x271121FF, 0x491F3CFF, 0x291A24FF, 0x280A1FFF,
//                0x470C36FF, 0x36192CFF, 0x271520FF, 0x2E0E23FF, 0x24151EFF, 0x421631FF, 0x330923FF, 0x331425FF,
//                0x42042CFF, 0x311023FF, 0x3C152AFF, 0x311A25FF, 0x3C1228FF, 0x3A1327FF, 0x331524FF, 0x45172EFF,
//                0x4F1532FF, 0x43122AFF, 0x321A24FF, 0x45162CFF, 0x450827FF, 0x2A0D19FF, 0x34101FFF, 0x3F1928FF,
//                0x28121AFF, 0x331B23FF, 0x401024FF, 0x1E0410FF, 0x431828FF, 0x50152CFF, 0x280715FF, 0x290615FF,
//        };
        // this one uses the newer, more-full-coverage way.
//        int[] BIG_CAL = new int[] {
//                0x00000000, 0x070708FF, 0x0B0A0AFF, 0x1C1A1BFF, 0x1D1D1EFF, 0x2D2C2EFF, 0x323231FF, 0x363839FF,
//                0x3D3F3EFF, 0x424241FF, 0x4A4748FF, 0x494B4AFF, 0x4F4D4CFF, 0x555352FF, 0x555554FF, 0x605D5EFF,
//                0x626361FF, 0x656666FF, 0x737676FF, 0x797A79FF, 0x807F7DFF, 0x9A9997FF, 0xA1A19EFF, 0xA6AAA9FF,
//                0xABA9A9FF, 0xABACAEFF, 0xB1B2AFFF, 0xB4B2B1FF, 0xB6B3B3FF, 0xB7B5B7FF, 0xB5B9BAFF, 0xB8BBBAFF,
//                0xBABDBBFF, 0xC8C8C5FF, 0xCAC7C8FF, 0xCBC9CBFF, 0xCBCAC8FF, 0xE4E6E5FF, 0xE5E6E6FF, 0xE9EAEBFF,
//                0xEEECEBFF, 0xAA1D58FF, 0x3F1F29FF, 0xC22264FF, 0xEF367CFF, 0xF6307BFF, 0xA4084DFF, 0xA33458FF,
//                0xFB2579FF, 0x8D5262FF, 0xD62669FF, 0xBC919BFF, 0xF8357BFF, 0xE5256DFF, 0x5C3D44FF, 0x84183FFF,
//                0xD76986FF, 0xF66E93FF, 0xFD8AA6FF, 0xF65B87FF, 0x965766FF, 0x7A0635FF, 0x5D4348FF, 0xBB4C69FF,
//                0xEB6083FF, 0xC997A0FF, 0xB2164CFF, 0xF81F69FF, 0xEEA4B1FF, 0xF05179FF, 0x421922FF, 0xE692A1FF,
//                0xF37790FF, 0xD61B59FF, 0xD51256FF, 0xB59499FF, 0x3C2126FF, 0xD93B64FF, 0xB87580FF, 0xA91E46FF,
//                0xAB5263FF, 0xD7929CFF, 0xE17B8CFF, 0xFA91A3FF, 0xF592A2FF, 0xFA3569FF, 0xAB2D4CFF, 0xFF2766FF,
//                0xE41F57FF, 0xC13755FF, 0x422A2DFF, 0x7C102EFF, 0xA4364BFF, 0xB45F6BFF, 0x632E36FF, 0xA92A45FF,
//                0xE8164FFF, 0xBF4556FF, 0x5F3A3DFF, 0xE03A54FF, 0xC44D5AFF, 0xFE184DFF, 0xBC7E81FF, 0xC99E9FFF,
//                0xBE0D38FF, 0xE03850FF, 0xD23C4FFF, 0xF4264CFF, 0xC56D71FF, 0xDB7076FF, 0xFC3352FF, 0xAC676AFF,
//                0xEFAFB0FF, 0xF93150FF, 0x62252AFF, 0x8C373DFF, 0xFD4157FF, 0x5F3A3BFF, 0xD64451FF, 0xFFA3A4FF,
//                0xEA8486FF, 0xF84456FF, 0xE6787AFF, 0xE37778FF, 0xD3565AFF, 0xED8081FF, 0x37030DFF, 0x580B16FF,
//                0xD31E34FF, 0x7D2D2FFF, 0xF67877FF, 0x824241FF, 0xF1444BFF, 0xAE2B32FF, 0x8C3737FF, 0x1C0C0CFF,
//                0x6E181AFF, 0x93413DFF, 0xB9252AFF, 0xF25C57FF, 0xDDA8A3FF, 0xD82F31FF, 0xCA3937FF, 0xD49D97FF,
//                0x7F3C37FF, 0x753D38FF, 0xAB5850FF, 0xFB1A20FF, 0xB35349FF, 0xEB685BFF, 0xE85B4FFF, 0xDF473CFF,
//                0xB2090EFF, 0xF36A5AFF, 0xD64639FF, 0xD64235FF, 0x5B3D38FF, 0xB93F32FF, 0x58160FFF, 0xECCAC4FF,
//                0xAB1C0EFF, 0x965F55FF, 0x6A3D35FF, 0xCB2814FF, 0xF89C8AFF, 0xD04733FF, 0xDB9384FF, 0x792D20FF,
//                0x4E190FFF, 0x8B3F30FF, 0xEA502FFF, 0x3A1810FF, 0xF4866AFF, 0x784C3FFF, 0xF94E1FFF, 0xBF664EFF,
//                0x401D14FF, 0x341209FF, 0x673324FF, 0x7F4332FF, 0x27150FFF, 0xB04E2FFF, 0xAF6A54FF, 0x815040FF,
//                0xDB6841FF, 0x8A4027FF, 0xEA6231FF, 0x9C5E48FF, 0x89391BFF, 0xFFB192FF, 0xDC5C1DFF, 0x773E23FF,
//                0xF3C0AAFF, 0x5B2C15FF, 0x7C5745FF, 0xF27638FF, 0xF6712AFF, 0xC96734FF, 0xF9C0A4FF, 0xD5713CFF,
//                0xC25E26FF, 0xC4947BFF, 0xA35C35FF, 0xCF6013FF, 0xD06A2BFF, 0xDF6D21FF, 0x4F2B15FF, 0xCCAA97FF,
//                0xC38D6EFF, 0xD26820FF, 0x533725FF, 0xE27E3DFF, 0xDA9971FF, 0xF8A068FF, 0x8F7564FF, 0xE9853FFF,
//                0x915328FF, 0xE47C2FFF, 0x7B5E4AFF, 0xECA876FF, 0xD87319FF, 0x9F560CFF, 0x85674DFF, 0x854F1AFF,
//                0xEDAA6EFF, 0x7B5027FF, 0x8C551AFF, 0xFDC38CFF, 0xC9AC91FF, 0x7C6046FF, 0x674827FF, 0x6C4210FF,
//                0xAE712BFF, 0xE99021FF, 0xBA9976FF, 0x79562FFF, 0xC97C13FF, 0x4F3A22FF, 0xF49A25FF, 0xEFAD5FFF,
//                0xDA9F58FF, 0x94662BFF, 0xCF9246FF, 0x725632FF, 0xD7AF7CFF, 0xFBB04AFF, 0xC08C45FF, 0xC78C36FF,
//                0xBC9A69FF, 0xF4AE3DFF, 0xBC8529FF, 0x9E8E76FF, 0xF4C16DFF, 0xDFB778FF, 0x4E3F28FF, 0xF9B330FF,
//                0xC0A982FF, 0xD7AA59FF, 0xC49C4AFF, 0xB9AB8FFF, 0xBFA46FFF, 0xDDC389FF, 0xC5992EFF, 0x614D19FF,
//                0x916F12FF, 0xD4B461FF, 0xE8CE8BFF, 0x9C7B0CFF, 0x836D2CFF, 0x9C874BFF, 0x544413FF, 0xEBE1C3FF,
//                0xEFC114FF, 0xFFDC67FF, 0x917928FF, 0xEDCA4BFF, 0xD1C596FF, 0xB59C3CFF, 0xDFC24BFF, 0x9A8A46FF,
//                0xE9CF5FFF, 0x7A6E3DFF, 0xB79C10FF, 0xCBB965FF, 0x5E531FFF, 0xF4D84AFF, 0x6F642FFF, 0xFFEC88FF,
//                0x655B25FF, 0xF4D942FF, 0xFCE45FFF, 0xB4A343FF, 0x7D6E0EFF, 0x988A33FF, 0x8C834CFF, 0x6C6530FF,
//                0x6C6A4EFF, 0xB7A93AFF, 0xA6A15EFF, 0xFEEE3AFF, 0x8C842AFF, 0x898760FF, 0x928A25FF, 0x5D591DFF,
//                0x87843FFF, 0xB9B55CFF, 0xF9F699FF, 0x6C6C4BFF, 0xDDD940FF, 0xC4C58DFF, 0xF4F365FF, 0xFBFDBEFF,
//                0xA8AA59FF, 0xF2F45FFF, 0x939642FF, 0xD6DC30FF, 0xBCC17EFF, 0x81853DFF, 0xD6E032FF, 0xA0A761FF,
//                0x636919FF, 0x7C853AFF, 0x3C4028FF, 0xA7B558FF, 0x646F27FF, 0xE2F590FF, 0x515C0DFF, 0x99AB3CFF,
//                0xDBFD57FF, 0x717B52FF, 0x9AA774FF, 0xB6BEA2FF, 0x87A02FFF, 0x788559FF, 0xAFBD8EFF, 0xDBFF77FF,
//                0xC5ED4DFF, 0xA7C068FF, 0x909C74FF, 0x84A70AFF, 0xDDFB9DFF, 0xA4BC6EFF, 0x5C7320FF, 0x657348FF,
//                0x3B4919FF, 0xAED554FF, 0xD1FD6DFF, 0x637C20FF, 0x839858FF, 0xB3E042FF, 0x7B983BFF, 0xCCFD64FF,
//                0x8AAD3FFF, 0x759236FF, 0x709220FF, 0x9ED021FF, 0x788660FF, 0x576C34FF, 0x93AA70FF, 0xA5E22EFF,
//                0xAFBE9DFF, 0x759348FF, 0xC2F576FF, 0x536E28FF, 0x4B622AFF, 0x5E8322FF, 0x415D11FF, 0x84AF4DFF,
//                0x677756FF, 0x5D8328FF, 0x8AB358FF, 0xC3E4A2FF, 0xB8D798FF, 0x6C8552FF, 0x76AA3AFF, 0x70A339FF,
//                0x6D904DFF, 0x69A921FF, 0xD9F5C4FF, 0x80D028FF, 0x77AA4BFF, 0x6EB522FF, 0x8BBE63FF, 0x76BF33FF,
//                0x15200BFF, 0x405C29FF, 0x81B15DFF, 0xA3E377FF, 0x829576FF, 0x95DE68FF, 0x93B97EFF, 0x98B38AFF,
//                0x38641CFF, 0x95B884FF, 0x71C444FF, 0x31541DFF, 0x53962FFF, 0x6FAD51FF, 0x355A23FF, 0x9EB494FF,
//                0x1E2F16FF, 0x90FC63FF, 0x1C3412FF, 0x87FD56FF, 0xC6FFB2FF, 0x83EB5BFF, 0x65C640FF, 0x3C6C2EFF,
//                0x94D085FF, 0x308019FF, 0x7CE864FF, 0x5FFB3BFF, 0x54E23AFF, 0x63C455FF, 0x207C16FF, 0x0E3A09FF,
//                0x41823AFF, 0x5BA256FF, 0x1BD919FF, 0x1C781BFF, 0xC4FCBFFF, 0x265224FF, 0x45BF43FF, 0x2B6E2CFF,
//                0xA2D5A0FF, 0x64C663FF, 0x097515FF, 0x37C53FFF, 0x3FFC4FFF, 0x48BB4EFF, 0x246528FF, 0x59BE5EFF,
//                0x2D9F39FF, 0x10A22DFF, 0x477449FF, 0x6EB272FF, 0x24B83FFF, 0x4A754DFF, 0x60D26DFF, 0x247F35FF,
//                0x18B342FF, 0x2B9240FF, 0x18FA5CFF, 0x459752FF, 0x44A656FF, 0x53E972FF, 0x1CBC4BFF, 0x35C859FF,
//                0x6FF889FF, 0x0E8A38FF, 0x68BA77FF, 0x45BF63FF, 0x97F0ADFF, 0x47BF6DFF, 0x50AB6CFF, 0x31854EFF,
//                0x37CC6FFF, 0x339255FF, 0xA7D7B4FF, 0xA3E0B4FF, 0x2BF182FF, 0x4FA46CFF, 0x93E2ABFF, 0x143922FF,
//                0x6EA881FF, 0x4DF692FF, 0x3FB06EFF, 0x477457FF, 0x10D176FF, 0x10BA6AFF, 0x80EAA8FF, 0x70B88BFF,
//                0x11C672FF, 0x33F090FF, 0x1D784AFF, 0x5BDC95FF, 0x14482DFF, 0x13B16AFF, 0x42594BFF, 0x61B283FF,
//                0x77E9A7FF, 0x4EA675FF, 0x3EB678FF, 0x5AB080FF, 0x44A371FF, 0x2C8258FF, 0x14DD93FF, 0x82E8B6FF,
//                0x80AC95FF, 0x62CA99FF, 0x6FB492FF, 0x257C57FF, 0x2EF9ABFF, 0x2F6950FF, 0x4DE5AAFF, 0xC5FCE2FF,
//                0x216249FF, 0x74F4C0FF, 0x227154FF, 0x1FB285FF, 0x2FBB8FFF, 0x4B7767FF, 0x4DAA8AFF, 0x245D4BFF,
//                0x19A783FF, 0x87D2BBFF, 0x78B3A1FF, 0x3F7F6EFF, 0x61A995FF, 0xAEFEE7FF, 0x6A9B8DFF, 0x26A78CFF,
//                0x085F50FF, 0x55CAB2FF, 0x68B1A2FF, 0x58B8A6FF, 0x1D8B7AFF, 0x2C776AFF, 0x48BEAAFF, 0x26544CFF,
//                0x1E8677FF, 0x739B95FF, 0x5DAEA4FF, 0x0E766EFF, 0x49C8C0FF, 0x6FF9F1FF, 0x3D5D5BFF, 0x3CE9E5FF,
//                0x8EC8C6FF, 0x9ECFCEFF, 0x193D3EFF, 0x6BACAEFF, 0x3B7375FF, 0x224C4EFF, 0x25A8AFFF, 0x6CC3C9FF,
//                0x17575BFF, 0x6DB5BAFF, 0x4CBDC5FF, 0x91E7EFFF, 0x4ACBD9FF, 0x9DE5EEFF, 0x99CAD1FF, 0x65DFF5FF,
//                0x12BFDAFF, 0x3DAABFFF, 0x032C34FF, 0x25505AFF, 0x32D5F8FF, 0x47BAD5FF, 0x3C8294FF, 0x6ECDE7FF,
//                0x68C4DEFF, 0x4C889AFF, 0x2D4C55FF, 0x22849FFF, 0x45CBF1FF, 0x42B2D3FF, 0x42BBE3FF, 0x0E627DFF,
//                0x154354FF, 0x2BC4FFFF, 0x1BADE9FF, 0x1F729AFF, 0x47B1E9FF, 0x476B80FF, 0x2D8BBFFF, 0x98C8E7FF,
//                0x072A3CFF, 0x2E6384FF, 0x03344CFF, 0x84C8F6FF, 0x397DA8FF, 0xC4E3F7FF, 0x698BA2FF, 0x1885C4FF,
//                0x9FC9EBFF, 0x5FA8E0FF, 0x7FA5C4FF, 0x103C5DFF, 0x06121CFF, 0x6FABE0FF, 0x4186C2FF, 0x1163A1FF,
//                0x63B5FFFF, 0x1181DCFF, 0x46A1F8FF, 0x67B1F9FF, 0x22415FFF, 0x8DC4FDFF, 0x0F3457FF, 0x2071C5FF,
//                0x1D5187FF, 0x91A8C1FF, 0x27558AFF, 0x0D3158FF, 0x125499FF, 0x426D9FFF, 0x549DF3FF, 0x235CA0FF,
//                0x226BC9FF, 0x68A1F7FF, 0xB4C5DCFF, 0x78A8F0FF, 0x8799B3FF, 0x0D6AEDFF, 0x2865C8FF, 0x113C81FF,
//                0x6491DDFF, 0x3E557BFF, 0x203D71FF, 0x90B5F5FF, 0x0E2C66FF, 0x3B69C5FF, 0x0E2044FF, 0x050E22FF,
//                0x305FC3FF, 0x4577E4FF, 0x2560F4FF, 0x81A3E8FF, 0x2861FFFF, 0x77A0F9FF, 0x3F70EEFF, 0x21409BFF,
//                0x3F68D8FF, 0x6D87C4FF, 0x1632A4FF, 0x2246EAFF, 0x2950E9FF, 0x7088C2FF, 0xACBCE1FF, 0x0D184CFF,
//                0x1713AFFF, 0x3854C2FF, 0x2B44D1FF, 0x0F0E6DFF, 0x324DF3FF, 0x334AF4FF, 0x2118D2FF, 0x7F9DFCFF,
//                0x172167FF, 0x2119CEFF, 0x3A4A86FF, 0x171188FF, 0x2104C2FF, 0x2510D8FF, 0x3241E2FF, 0x19224BFF,
//                0x495DC0FF, 0x4457E9FF, 0x3333DFFF, 0x4454E6FF, 0x7382BDFF, 0x1E1888FF, 0x3036B0FF, 0x464FF7FF,
//                0x5160DBFF, 0x8999E1FF, 0x232088FF, 0x2D3461FF, 0x4750D4FF, 0x3D46A6FF, 0x3F4996FF, 0x0B052EFF,
//                0x3E2AF2FF, 0x3536ACFF, 0x7585FFFF, 0x292E6DFF, 0x27109AFF, 0x110842FF, 0x414879FF, 0x2C2697FF,
//                0x9BA6E3FF, 0xB6BEEDFF, 0x3F449BFF, 0x4527FCFF, 0xA9B3FDFF, 0x838CD3FF, 0x747BF6FF, 0x4E45E3FF,
//                0x9FA7ECFF, 0x4F47DBFF, 0x6C72D4FF, 0x4437C8FF, 0x8086C5FF, 0x33346BFF, 0x5757C4FF, 0x5B5ACAFF,
//                0x6462E3FF, 0xCCCFEFFF, 0x797BEAFF, 0x4C2FDEFF, 0x5B4AEFFF, 0x554BCFFF, 0x383383FF, 0xCACDFDFF,
//                0x4B03E6FF, 0x403B8DFF, 0x4F4C9BFF, 0x4D2BD5FF, 0x8587C0FF, 0x4430AFFF, 0x6E60EBFF, 0x4729B7FF,
//                0x51507DFF, 0x5F5D93FF, 0x5F33EDFF, 0x646195FF, 0x5743B9FF, 0xC3C2E2FF, 0x564F8DFF, 0x6A3BF6FF,
//                0x7B63EFFF, 0x382875FF, 0x5A24D7FF, 0x2A2645FF, 0x0E0224FF, 0x5631BFFF, 0x9F95E3FF, 0x6622F1FF,
//                0x7B69D1FF, 0x6A4DD0FF, 0x362867FF, 0x7A4CFDFF, 0x9081DDFF, 0x724CE2FF, 0x7240ECFF, 0x4A14A8FF,
//                0x7143E6FF, 0x3A167FFF, 0x45049DFF, 0x8A72E2FF, 0xABA3D8FF, 0x612DCBFF, 0x784DE8FF, 0x8573C9FF,
//                0x9982E8FF, 0xA58AFFFF, 0x482E87FF, 0x946FFCFF, 0x6D0BEBFF, 0x652FCAFF, 0x642EC8FF, 0x1E103AFF,
//                0x8555F1FF, 0xAFA1E2FF, 0x1D182DFF, 0xD3C7FEFF, 0x5F5481FF, 0x7140D0FF, 0x8879B5FF, 0x6125BFFF,
//                0x6B28D0FF, 0x9772ECFF, 0xB19FE4FF, 0x634B9AFF, 0x4A3871FF, 0x6A23CBFF, 0x352D48FF, 0x9B74EFFF,
//                0x9768F1FF, 0x6D32C7FF, 0x7711E9FF, 0x9C73E7FF, 0x7F4FCDFF, 0x7714E0FF, 0x885ECCFF, 0x9248F8FF,
//                0x8D6ACAFF, 0x7C21E1FF, 0x6929B7FF, 0x591B9FFF, 0x6E5697FF, 0x8038DBFF, 0x8C39F0FF, 0x4B376CFF,
//                0x4A326EFF, 0x9146EFFF, 0x59358BFF, 0x8D56D9FF, 0x8712F0FF, 0x855EC0FF, 0x754CADFF, 0x8B0EF6FF,
//                0x5B2996FF, 0x52416CFF, 0x301250FF, 0x52307FFF, 0x8D21F4FF, 0x8356BEFF, 0x3D1B62FF, 0x2E1449FF,
//                0x5D457DFF, 0x564A67FF, 0x824BBEFF, 0xA491BDFF, 0x652A9CFF, 0x472A65FF, 0x825EAAFF, 0x9C3AF2FF,
//                0xB173F3FF, 0x8E39D5FF, 0x9D41EAFF, 0x7124ADFF, 0x6B359CFF, 0x9864CAFF, 0x3C095DFF, 0xC297EEFF,
//                0xA56ED7FF, 0xAF8BD2FF, 0x8B53BBFF, 0xC4B3D5FF, 0xB24EFFFF, 0x8D1BD7FF, 0x783BA8FF, 0x7D39B2FF,
//                0xB06EE7FF, 0xB455FCFF, 0x2F1E3DFF, 0x9C55D0FF, 0xA78FBAFF, 0x9B24E2FF, 0xC996F2FF, 0xB96EF0FF,
//                0x8A1BCAFF, 0x9823DDFF, 0xA51EF0FF, 0xA53BE8FF, 0xB79BCDFF, 0xAB3FEEFF, 0xDBB0FBFF, 0x612D82FF,
//                0xA92FECFF, 0xB93EFFFF, 0xC88BF2FF, 0x8134ADFF, 0xA221E3FF, 0x5F2480FF, 0xB84CF6FF, 0xB04BE8FF,
//                0xD8C2E7FF, 0x711D9AFF, 0x9661B4FF, 0xBB92D4FF, 0xD39CF2FF, 0x9D44CAFF, 0x7A3A9AFF, 0xC967FAFF,
//                0xC563F6FF, 0x70348BFF, 0x9831C3FF, 0xA230CFFF, 0xB269D1FF, 0xC1A4CEFF, 0xAB4BD0FF, 0xAB10DDFF,
//                0xDB98F5FF, 0xBC28EDFF, 0xA249C2FF, 0x83319FFF, 0xBF83D4FF, 0x744585FF, 0xDA90F3FF, 0x500A63FF,
//                0xC16CDCFF, 0x70487DFF, 0x9A31B8FF, 0xC058DFFF, 0xD95AFDFF, 0xA54EBCFF, 0xDAA4E8FF, 0xD627FFFF,
//                0xD193E1FF, 0x511060FF, 0xE88BFFFF, 0x8C479DFF, 0xB54ECEFF, 0xC04FD9FF, 0x902BA5FF, 0xBD75CDFF,
//                0x7D5287FF, 0xDA3DFAFF, 0xB04CC5FF, 0xDC6AF2FF, 0xE396F0FF, 0xAC57BCFF, 0xF4AAFFFF, 0xC048D6FF,
//                0x70317AFF, 0xCF77DCFF, 0xB372BDFF, 0xBD32D1FF, 0xD73BEDFF, 0xBE3FCEFF, 0xA121B0FF, 0xCD21E0FF,
//                0xEF70FCFF, 0xBE0BCEFF, 0xE050EDFF, 0xE171EAFF, 0x9A539EFF, 0xECB2EEFF, 0xD683D9FF, 0xF56AFDFF,
//                0xD10ADEFF, 0x674768FF, 0x9B36A1FF, 0xEC24F8FF, 0xB828C0FF, 0x7B0F81FF, 0xA536A9FF, 0xF12CF8FF,
//                0xFA6DFCFF, 0xD863D8FF, 0xF278F1FF, 0xD618D9FF, 0x371A37FF, 0xAA69A8FF, 0x862186FF, 0xDABED8FF,
//                0x531853FF, 0xCF1DCEFF, 0xCD4CC9FF, 0xE558E0FF, 0x845081FF, 0x972294FF, 0xF632EFFF, 0xC864C1FF,
//                0xE04DD8FF, 0xFCBFF5FF, 0xF2C6EBFF, 0x5A2D54FF, 0xF748E7FF, 0xF476E5FF, 0x813279FF, 0xD735C7FF,
//                0x885180FF, 0x2B1328FF, 0xEC23DAFF, 0xF97FE8FF, 0x9F1692FF, 0xE15AD0FF, 0xF03BDCFF, 0xF461E1FF,
//                0xF230DDFF, 0xE40FCEFF, 0x472A42FF, 0xD38EC6FF, 0xE987D6FF, 0xC93AB4FF, 0x6E3D65FF, 0xCD82BDFF,
//                0xA42C91FF, 0xDD43C3FF, 0xCC3CB3FF, 0xF085D9FF, 0xCE91BFFF, 0xB5299DFF, 0xC841ADFF, 0xB23C9AFF,
//                0xDB23BBFF, 0xBA3AA0FF, 0xF93DD5FF, 0xF23FCFFF, 0x431639FF, 0xF96FD7FF, 0xE994D2FF, 0xB13896FF,
//                0xFC35D3FF, 0x821F6DFF, 0x921B79FF, 0xF634CBFF, 0xEC85CFFF, 0xE856C1FF, 0xC149A0FF, 0xF852CAFF,
//                0xDE2EB1FF, 0xF90EC4FF, 0xFF71D3FF, 0x963F7CFF, 0xCF80B3FF, 0xE21EAFFF, 0x591546FF, 0xE27FBFFF,
//                0xE835B2FF, 0xCD399EFF, 0xD635A4FF, 0xF616B5FF, 0xE812A9FF, 0xC3659DFF, 0xE334A3FF, 0x952F6DFF,
//                0xEC16A5FF, 0x760C52FF, 0xF582C2FF, 0xCC278DFF, 0x492839FF, 0xFC42ADFF, 0x3A0D27FF, 0xDE3C98FF,
//                0xFC69B7FF, 0xB05E86FF, 0xA5156AFF, 0xFA83BDFF, 0xE43997FF, 0xD2308AFF, 0xC82081FF, 0x502B3CFF,
//                0xF753A5FF, 0x4A0A2EFF, 0x894865FF, 0x491730FF, 0xB02068FF, 0xFA4498FF, 0x6D153FFF, 0xAF1F64FF,
//                0x942557FF, 0xEC72A2FF, 0xFC2D8EFF, 0x4C162DFF, 0xF25394FF, 0x753B4FFF, 0x562236FF, 0xD7407AFF,
//        };

//        int[] JWBX = new int[] {
//                0x00000000, 0x222423FF, 0x272729FF, 0x282827FF, 0x292A28FF, 0x2D2C2BFF, 0x383939FF, 0x3F3D3EFF,
//                0x434142FF, 0x424242FF, 0x4B4C4AFF, 0x4C4D4FFF, 0x636461FF, 0x646465FF, 0x646466FF, 0x646465FF,
//                0x696968FF, 0x6A6A6CFF, 0x6B6D6BFF, 0x6B6E6EFF, 0x6E6D6CFF, 0x726F6FFF, 0x717373FF, 0x747372FF,
//                0x787777FF, 0x777B7BFF, 0x7C7B79FF, 0x7E7F7DFF, 0x898A87FF, 0x8B8B8BFF, 0x908F8DFF, 0x92918FFF,
//                0x919391FF, 0x999799FF, 0x99989BFF, 0x9C9A99FF, 0x9D9E9DFF, 0x9FA09DFF, 0xA09FA1FF, 0xA4A5A8FF,
//                0xADAAAAFF, 0xAEAEABFF, 0xBAB7B7FF, 0xC0C3C3FF, 0xC3C3C6FF, 0xCECDCDFF, 0xCECECDFF, 0xDDDBD8FF,
//                0xECEFEFFF, 0xF4F5F2FF, 0x793C4FFF, 0xC4A0AAFF, 0xFD77A2FF, 0x60273AFF, 0x5B2A39FF, 0xE55184FF,
//                0x441224FF, 0x8D5061FF, 0xEA819FFF, 0xFBA2B9FF, 0xD45F81FF, 0xD499A7FF, 0xE62F72FF, 0xFC749AFF,
//                0xC08F9AFF, 0xE23B72FF, 0xD2607FFF, 0x5A2B37FF, 0xDF2F6BFF, 0x2C141AFF, 0x2E1019FF, 0x861E40FF,
//                0xFF3678FF, 0xDE90A1FF, 0xA04A5FFF, 0x71565BFF, 0x251217FF, 0xD17D8DFF, 0x8C6068FF, 0xF62269FF,
//                0xEA2061FF, 0x80243CFF, 0xF14873FF, 0x962141FF, 0xA70F42FF, 0x661F30FF, 0xEE93A1FF, 0xE25975FF,
//                0xDD3F63FF, 0xC96374FF, 0x850631FF, 0xCB214DFF, 0xB24254FF, 0x673A3FFF, 0xF9325EFF, 0x77464BFF,
//                0xB70A3DFF, 0xBF2947FF, 0xD73653FF, 0xCDA1A4FF, 0xF7375BFF, 0x93323FFF, 0xF59AA0FF, 0x6C0E22FF,
//                0xF13B57FF, 0xB03A48FF, 0x742830FF, 0xC64754FF, 0xE8606BFF, 0x957373FF, 0xDE4959FF, 0xA84D53FF,
//                0xA0494DFF, 0xE90E3EFF, 0x9B4C4FFF, 0x654949FF, 0xFF6C72FF, 0xB03D44FF, 0x632528FF, 0x894445FF,
//                0xA13338FF, 0x8F1222FF, 0xD95658FF, 0xD14F52FF, 0xFE4B53FF, 0xE1303EFF, 0xB01F2CFF, 0xC54446FF,
//                0xFF6F6DFF, 0xB4262FFF, 0xC63F42FF, 0xCA3138FF, 0xD59B98FF, 0xE2152DFF, 0xE1313AFF, 0xE90B2BFF,
//                0xD56762FF, 0x8F2224FF, 0x390D0EFF, 0xCD4541FF, 0xC22C2EFF, 0xAE2829FF, 0xDD6961FF, 0x9E312EFF,
//                0x6B433FFF, 0xEC3A39FF, 0xFE3836FF, 0xC61E21FF, 0xED4640FF, 0xD24840FF, 0x7E6360FF, 0xFFA99EFF,
//                0xFF8C7FFF, 0xCF6E63FF, 0x98211CFF, 0xAE342CFF, 0xE92A24FF, 0x57322EFF, 0xB45045FF, 0x885F59FF,
//                0xF62822FF, 0x590C09FF, 0x793028FF, 0xD83325FF, 0x7B0C05FF, 0xDE796AFF, 0x752F26FF, 0x9A4B40FF,
//                0xF2A091FF, 0xAD5848FF, 0xF53612FF, 0xCA8B7DFF, 0x631B0FFF, 0x812919FF, 0xF2765CFF, 0xF99A84FF,
//                0xD5674FFF, 0xA9361EFF, 0x926C63FF, 0xFE896EFF, 0x972400FF, 0xB1371CFF, 0x8D4C3AFF, 0xBB9C92FF,
//                0xDE795DFF, 0xAB482CFF, 0x89331AFF, 0xBE9E94FF, 0xBF3B0CFF, 0xAB573EFF, 0x8E4A35FF, 0x412D26FF,
//                0xC26949FF, 0xE66B3EFF, 0xE67043FF, 0xB75428FF, 0xA4512CFF, 0xF1CDBEFF, 0xB8795DFF, 0xB2613BFF,
//                0x9C4519FF, 0x997E72FF, 0xB95929FF, 0xEC671FFF, 0xB94E0EFF, 0xD2A893FF, 0xDAB6A4FF, 0xF38F5CFF,
//                0xFDA577FF, 0x995937FF, 0xF29665FF, 0xB35825FF, 0x914D28FF, 0x874F30FF, 0xD39F83FF, 0xB19280FF,
//                0xCE9C7FFF, 0xD56418FF, 0xF38845FF, 0xD4804DFF, 0xEFA375FF, 0x5F4738FF, 0xDC986BFF, 0xB45E15FF,
//                0xD77C37FF, 0xD9731AFF, 0xB06B37FF, 0x472608FF, 0x624C3CFF, 0xD9AC8BFF, 0xE78B43FF, 0x7F624CFF,
//                0xBCA18DFF, 0xC89265FF, 0xFB8E1EFF, 0x977F6BFF, 0xFEA248FF, 0xC58A53FF, 0xE0841EFF, 0x935714FF,
//                0xF8A85CFF, 0xAE6E2CFF, 0xB67225FF, 0xE49844FF, 0xAD722FFF, 0x816342FF, 0xC97F1EFF, 0xD5913BFF,
//                0xA4712EFF, 0x563E1EFF, 0x968671FF, 0xECAD5BFF, 0xAF8855FF, 0x765323FF, 0xD18B18FF, 0xE3CFB4FF,
//                0x72562FFF, 0xFCCB85FF, 0xB89562FF, 0x614F35FF, 0xE2C393FF, 0xBC9B65FF, 0xB6A386FF, 0xD3A04BFF,
//                0x8F7A58FF, 0x5A4C35FF, 0x7E673FFF, 0xCCA766FF, 0xA18552FF, 0xE1A110FF, 0xC28C0EFF, 0xBC9446FF,
//                0xE1B663FF, 0x6E572CFF, 0xDDAB45FF, 0xB1A58DFF, 0xA99A7DFF, 0x927A48FF, 0xFAE4B4FF, 0xD0BF9AFF,
//                0xCDAC62FF, 0xD6AA46FF, 0xD8B15AFF, 0xEBB93EFF, 0xF7BD22FF, 0x8C7131FF, 0xFFC82EFF, 0x8C701EFF,
//                0x7B6E49FF, 0xFECC2CFF, 0xF1C433FF, 0xFEDF7DFF, 0xC3A33BFF, 0xE0C872FF, 0xA38E3BFF, 0xF1D255FF,
//                0xA39352FF, 0x817128FF, 0xE8CC4DFF, 0x5E5942FF, 0xE2C952FF, 0x4E4725FF, 0xB9AD71FF, 0xC5B049FF,
//                0x6B6132FF, 0x4B4834FF, 0x595539FF, 0xC5B10FFF, 0xC3B545FF, 0xBDB14DFF, 0x898669FF, 0x776F1AFF,
//                0x4C4A32FF, 0xF0E985FF, 0xE6E6B3FF, 0xF5F4B1FF, 0xD4D382FF, 0x3C3C27FF, 0xB6B236FF, 0xD6D341FF,
//                0xF3EE33FF, 0x82813EFF, 0x9B9D60FF, 0xE8E920FF, 0xB4B861FF, 0xC4C963FF, 0xD6DE87FF, 0x8C933AFF,
//                0xD7E159FF, 0xB2BA6FFF, 0xA4AC59FF, 0x858C4CFF, 0xDDE79CFF, 0xC5D34FFF, 0xD8E0A7FF, 0x9FAB46FF,
//                0xE5F672FF, 0x949F51FF, 0x879535FF, 0x81912EFF, 0x879455FF, 0x8CA033FF, 0x788A2FFF, 0xA0BA3AFF,
//                0x58603DFF, 0x58691FFF, 0x7A913DFF, 0xA0BD5AFF, 0x92B447FF, 0x607928FF, 0x9FAB8CFF, 0x9CCB35FF,
//                0x839A5FFF, 0xE5F6CDFF, 0x4F6F0CFF, 0x789B42FF, 0x83AD45FF, 0x869D6AFF, 0x7A9E4BFF, 0x79A33FFF,
//                0x769D44FF, 0x5F852EFF, 0x9EC96EFF, 0xB7FE60FF, 0x5F7449FF, 0xAEE96DFF, 0x3C5224FF, 0x6BA91BFF,
//                0x4C6931FF, 0x4E7921FF, 0x526E3AFF, 0x6A9642FF, 0x516343FF, 0x497915FF, 0x7DD220FF, 0xA8F767FF,
//                0x5A981BFF, 0x93D65FFF, 0xA4D185FF, 0x566A48FF, 0x9BD176FF, 0x63AA31FF, 0x6E8F5BFF, 0x5DA42CFF,
//                0x73E525FF, 0x37512BFF, 0x90F65AFF, 0x576651FF, 0xAFE398FF, 0x5DBC2DFF, 0x418423FF, 0x7C8D75FF,
//                0x60B43DFF, 0x465640FF, 0x5EB346FF, 0x9CEE87FF, 0x57DB2FFF, 0x508742FF, 0x68925EFF, 0x89B27FFF,
//                0x93AE8DFF, 0x236D0EFF, 0x345E2BFF, 0x237608FF, 0x75E75DFF, 0x38CF16FF, 0x46A63AFF, 0x618C5BFF,
//                0x84FA77FF, 0x5D7B59FF, 0x3F9238FF, 0x4FC946FF, 0x7FFD74FF, 0x91BF8CFF, 0x82C07DFF, 0x2CFA2CFF,
//                0x207A24FF, 0x195C1CFF, 0x6AE86CFF, 0x8ADE89FF, 0x206323FF, 0x468548FF, 0x31B43EFF, 0x37953EFF,
//                0x4BBB55FF, 0x486C4AFF, 0x8AD78EFF, 0x6FD276FF, 0x95EF9AFF, 0xB1DBB2FF, 0x7BA67DFF, 0x5CC165FF,
//                0x48A454FF, 0x3EC355FF, 0x208738FF, 0x35974BFF, 0x35A751FF, 0x61CD76FF, 0x61D179FF, 0x8EF8A3FF,
//                0x28753CFF, 0x0C5D29FF, 0x86AE8DFF, 0x54BD6FFF, 0x3C9355FF, 0x88D39AFF, 0x47B76BFF, 0x62B97BFF,
//                0x4B905FFF, 0x47885BFF, 0x144125FF, 0x2D6641FF, 0x42A767FF, 0x8DD1A2FF, 0x49BE77FF, 0x2A6643FF,
//                0x147544FF, 0x20834FFF, 0x2BDA88FF, 0x317451FF, 0x8CB79EFF, 0x496454FF, 0x54E19CFF, 0x9BDCB8FF,
//                0x2BFCA4FF, 0x5ABA8AFF, 0x74E3ACFF, 0x3D5749FF, 0x75FBBEFF, 0x40EDA6FF, 0x85B99FFF, 0x92FAC9FF,
//                0x93E8C0FF, 0x7FD2ACFF, 0x12AD7DFF, 0x8CD4B5FF, 0x3E6958FF, 0x73A490FF, 0x48D6A6FF, 0x5D7B6FFF,
//                0x4DE2B1FF, 0x63BE9EFF, 0x19C89BFF, 0x268A6DFF, 0x26745EFF, 0x34967BFF, 0x749288FF, 0x0F473BFF,
//                0x42B09AFF, 0x1FAC94FF, 0x27C3A9FF, 0x2E695EFF, 0x1C342FFF, 0x147366FF, 0x97B9B3FF, 0x186E62FF,
//                0x5FB0A3FF, 0xD0F7F0FF, 0x769F99FF, 0x15A395FF, 0x397871FF, 0x4E7A74FF, 0x1CB9ACFF, 0x7BB5AFFF,
//                0x31C7BEFF, 0x209992FF, 0x72B2AEFF, 0x84C2C0FF, 0x92FDFCFF, 0xA0F0EFFF, 0x65D7D8FF, 0x148284FF,
//                0x649697FF, 0x06ACB1FF, 0x65F9FFFF, 0x81C8CBFF, 0x426465FF, 0x6ACED5FF, 0x65A4A9FF, 0x70B1B7FF,
//                0x4EECFBFF, 0x7BA7ACFF, 0x33A5B1FF, 0x26C8DAFF, 0xA5E8F1FF, 0x1B9CABFF, 0x6EC4D1FF, 0x38C5DBFF,
//                0x5C8B93FF, 0x487B84FF, 0x279AADFF, 0x22555EFF, 0x10A5BCFF, 0x306D79FF, 0x8CDDEEFF, 0x11DAFEFF,
//                0x4EA5BAFF, 0x29454CFF, 0xA3DBEAFF, 0x469BB4FF, 0x3B96B1FF, 0x29A5C9FF, 0x5AA5BEFF, 0x539FB9FF,
//                0x78ABBEFF, 0x73B2CAFF, 0x21424EFF, 0x587682FF, 0x53ADD3FF, 0x5596B4FF, 0x5998B6FF, 0x10B1EFFF,
//                0x5CB1DBFF, 0x56A2C8FF, 0x26BDFFFF, 0x3E6275FF, 0xA9DBF8FF, 0x7AA0B7FF, 0x327FA9FF, 0x48748EFF,
//                0x2F6B8DFF, 0x2F97CDFF, 0x2E9CD8FF, 0x3C84AEFF, 0x94D1F7FF, 0x357BA5FF, 0x2E5167FF, 0x5DBCFAFF,
//                0x586E7DFF, 0x67B1E5FF, 0x499CD7FF, 0x879FB2FF, 0xB1D8F9FF, 0x2F6998FF, 0x012B46FF, 0x4AA5F6FF,
//                0x589EDFFF, 0x4A7BA9FF, 0x3E6FA3FF, 0x2D8CEEFF, 0xA5C0DDFF, 0x146DCDFF, 0x91C0FAFF, 0x243D5CFF,
//                0x3C8EF3FF, 0x438DF4FF, 0x3683F4FF, 0x346ABAFF, 0xADCBF5FF, 0x3166B6FF, 0x1C54AAFF, 0x113976FF,
//                0x4269A5FF, 0x2F7BF5FF, 0x325EA5FF, 0x1660D7FF, 0x8FAAD6FF, 0x85A5D8FF, 0x75A1EEFF, 0x477AD5FF,
//                0x778DB3FF, 0x6F90CAFF, 0x3272F4FF, 0x597DC1FF, 0x1C53C9FF, 0x1344B1FF, 0x376EEDFF, 0x4D84FAFF,
//                0x083AB8FF, 0x36518BFF, 0x222F4BFF, 0x0334D5FF, 0x2D3F68FF, 0x5F78AEFF, 0x0624CCFF, 0x6B96FEFF,
//                0x5D7FCFFF, 0x55627FFF, 0x4E72CFFF, 0xC6D2ECFF, 0x7393E0FF, 0x0A1456FF, 0x3B5DD4FF, 0x1D06ECFF,
//                0x9AA8CBFF, 0x6788E9FF, 0x4D65AAFF, 0x1A12C9FF, 0x5E6C8FFF, 0x4569F8FF, 0x5B76CBFF, 0x4C6CDAFF,
//                0xABC1FCFF, 0x324EE0FF, 0x4C5C8BFF, 0x92A9EBFF, 0x3049F1FF, 0x8595C2FF, 0x86A3FAFF, 0x3C58E5FF,
//                0x849EEDFF, 0x2F42E7FF, 0x4F6CDDFF, 0x11026FFF, 0x3142E8FF, 0x30429FFF, 0x6B89FAFF, 0x273580FF,
//                0x4458BFFF, 0x3746D7FF, 0x343ECAFF, 0x1C2144FF, 0x8195F6FF, 0x3633D6FF, 0x5260DEFF, 0x211F83FF,
//                0x130B4FFF, 0x7D8DEBFF, 0x515CD2FF, 0x6371EEFF, 0x4D53E7FF, 0x2B06AEFF, 0x3C4387FF, 0x50588BFF,
//                0x3933BEFF, 0x3B23DCFF, 0x4347BCFF, 0x462FF8FF, 0x878CA9FF, 0x474CAFFF, 0x8994DDFF, 0x4742D1FF,
//                0x5A5BF4FF, 0x202250FF, 0x33328EFF, 0x31289BFF, 0x7279ADFF, 0x4A4F96FF, 0x9EA3C7FF, 0x564DF8FF,
//                0x363873FF, 0x4723E3FF, 0x5656C0FF, 0x6F739FFF, 0xD9DDFBFF, 0x6160CEFF, 0x5A50DAFF, 0x5949E7FF,
//                0x9597E0FF, 0x6A67D7FF, 0x5545D3FF, 0x5448C3FF, 0x543ED5FF, 0x59579CFF, 0x5728F1FF, 0x4829C1FF,
//                0x908FE0FF, 0x4222B2FF, 0x8484B6FF, 0x433891FF, 0x593DDCFF, 0x4D4597FF, 0x9492E0FF, 0x7968F7FF,
//                0x8F88E9FF, 0x9793DEFF, 0x9E99F7FF, 0x635CA9FF, 0x7359F7FF, 0x9085FAFF, 0x8A88AFFF, 0x5F2AEDFF,
//                0x5A13EBFF, 0x7661E6FF, 0x6A5CBFFF, 0x2B2452FF, 0x8B81DAFF, 0x9080F0FF, 0x4B19B0FF, 0xBCB4F7FF,
//                0x795DE3FF, 0x6A4BCFFF, 0x6433DAFF, 0x6E4BD7FF, 0x250954FF, 0x56409CFF, 0xAC9AFFFF, 0x5C21C8FF,
//                0x7031EEFF, 0x8E79DEFF, 0x5302B9FF, 0x5E45A4FF, 0x7C49F1FF, 0x3E3953FF, 0x27154DFF, 0x553B96FF,
//                0x765CBCFF, 0x645591FF, 0x8A5BEFFF, 0x7B39E9FF, 0x1F0E3CFF, 0x8B60E5FF, 0xA38EDBFF, 0x6E697FFF,
//                0x8440F1FF, 0x6942B0FF, 0x342750FF, 0x5B28A7FF, 0x9B8DBDFF, 0x8557D6FF, 0x8A73BDFF, 0x46217CFF,
//                0x733CC7FF, 0x783FCDFF, 0x7621D8FF, 0x6127ABFF, 0x763FC7FF, 0x9062DEFF, 0x5D418DFF, 0x986BE4FF,
//                0x440D7EFF, 0x6C39B2FF, 0x532B87FF, 0x776893FF, 0x8B5DD0FF, 0xA580E1FF, 0xB697E7FF, 0xBB8DFEFF,
//                0x744CAAFF, 0x9354E3FF, 0xB9A6D9FF, 0x62517DFF, 0x951EFFFF, 0x190F25FF, 0x902BEEFF, 0xAC89DAFF,
//                0x49097CFF, 0xB689F0FF, 0x694296FF, 0xA587CBFF, 0x9B2EF8FF, 0x7F7092FF, 0x8C3FD6FF, 0x59476EFF,
//                0x762CB8FF, 0x4D1E76FF, 0x843FC5FF, 0xB29CCCFF, 0x5C1892FF, 0x8E3ED5FF, 0x4A2D66FF, 0xBB81F8FF,
//                0xB569FDFF, 0x7846A6FF, 0x9748DBFF, 0xAB75DFFF, 0x5A078EFF, 0xB354FFFF, 0xB26CECFF, 0x5A2F7CFF,
//                0x8D26CEFF, 0x531F76FF, 0x411A5AFF, 0xA663D6FF, 0xAB74D4FF, 0x09010DFF, 0x6A4F7DFF, 0xB22CFFFF,
//                0x633A7FFF, 0xA52BE9FF, 0x62397AFF, 0x651F89FF, 0x9944C8FF, 0xB594CBFF, 0xBC73E6FF, 0x784793FF,
//                0x9642C2FF, 0x9A63B8FF, 0xA674C1FF, 0xA96EC8FF, 0xB2A0BCFF, 0xAF34E4FF, 0xBC31F4FF, 0xB051DAFF,
//                0x681288FF, 0x270833FF, 0x876E93FF, 0xB559DBFF, 0xC54CF4FF, 0x633D71FF, 0xBB4EE3FF, 0x4A2C54FF,
//                0xD6ACE4FF, 0xAB67C0FF, 0xCC57F1FF, 0x9220B3FF, 0xDBADE9FF, 0x744583FF, 0x880CA7FF, 0xC172D8FF,
//                0xCB69E5FF, 0xEA9CFDFF, 0xD82BFFFF, 0x4A2952FF, 0x501F5CFF, 0xAC30C9FF, 0xAB8CB2FF, 0x8A2A9FFF,
//                0xE46BFFFF, 0xB571C3FF, 0xAF58C1FF, 0xC92BE7FF, 0xE9ABF3FF, 0xC548DCFF, 0x8B1D9EFF, 0xDA48F3FF,
//                0xA11CB7FF, 0xDA47F3FF, 0x68466DFF, 0xDE15FCFF, 0xD485DFFF, 0xBA3BCDFF, 0x69526CFF, 0xBE53CDFF,
//                0x9610A7FF, 0x6C1477FF, 0xC53CD7FF, 0x320937FF, 0xD542E8FF, 0x8C4E92FF, 0x9D3CA9FF, 0xA46CA9FF,
//                0x8E1F99FF, 0xD46EDEFF, 0xBC4EC6FF, 0xD85AE3FF, 0xDC6CE5FF, 0xCD69D3FF, 0xF151FAFF, 0xDB37E4FF,
//                0x795779FF, 0xE062E4FF, 0xE646ECFF, 0xEC6FEEFF, 0xE83AECFF, 0xE520EAFF, 0xC97BC7FF, 0xCC18D0FF,
//                0x9E329EFF, 0xEC2EEEFF, 0x7E1F7EFF, 0xC94DC8FF, 0xE21AE1FF, 0xA95BA5FF, 0xF71BF4FF, 0x974A93FF,
//                0xF284EAFF, 0x972693FF, 0xF447EAFF, 0xC8AAC4FF, 0x5A1457FF, 0xB85EB0FF, 0x9F1D99FF, 0xEE75E3FF,
//                0x792873FF, 0xE140D5FF, 0xB96DB0FF, 0xD165C5FF, 0xD858CCFF, 0xA04A96FF, 0xDB40CEFF, 0xD384C8FF,
//                0xEBBCE3FF, 0xD092C6FF, 0x95518BFF, 0xE022CFFF, 0x971E8BFF, 0xAD79A3FF, 0xA58B9FFF, 0xF3C7EAFF,
//                0x972588FF, 0xD5ADCCFF, 0xF353DAFF, 0x853178FF, 0xE084CEFF, 0xDD33C4FF, 0xEF7CD8FF, 0xCB50B5FF,
//                0xFAB0E9FF, 0xD24DBAFF, 0xE526C6FF, 0xAA0291FF, 0x7F0D6DFF, 0xEB87D3FF, 0xE570CAFF, 0xA03D8AFF,
//                0xBF54A5FF, 0xC243A6FF, 0xEB2AC6FF, 0xB23B98FF, 0xC23EA5FF, 0xFDDDF2FF, 0x4A093DFF, 0xBD449FFF,
//                0xF151C8FF, 0x47283DFF, 0x941A77FF, 0xD282B8FF, 0xE32FB5FF, 0xF111BDFF, 0xD785BBFF, 0x9A467FFF,
//                0x835172FF, 0xCE30A2FF, 0xDF4EB3FF, 0xF4D0E6FF, 0xC13598FF, 0x932973FF, 0xFC55C7FF, 0xDA24A6FF,
//                0xC84C9FFF, 0x6A1B52FF, 0x996F89FF, 0xD355A8FF, 0xC91F98FF, 0xFD61C7FF, 0xCF82B1FF, 0xE12AA9FF,
//                0xF372C4FF, 0xEA6EBDFF, 0xAF6793FF, 0xE35DB2FF, 0xEC04ACFF, 0xEB06ABFF, 0xFF67C7FF, 0xE628A8FF,
//                0xE24AABFF, 0x8F687DFF, 0xEF2BABFF, 0x865972FF, 0xBA99AAFF, 0xC83E92FF, 0x924A72FF, 0xF250ADFF,
//                0xF36FB6FF, 0xC84B90FF, 0xD23E93FF, 0xCD4F94FF, 0xAC1C73FF, 0xE8B4CCFF, 0xE22896FF, 0xCF6B9EFF,
//                0xDB198EFF, 0xE957A4FF, 0x6F1949FF, 0xE36DA5FF, 0x760C49FF, 0x3C0425FF, 0xC8558CFF, 0xB30E6CFF,
//                0xC37496FF, 0x5F424DFF, 0xDF328BFF, 0xBC6188FF, 0xEE519AFF, 0xFC98C0FF, 0xE44590FF, 0xCC88A2FF,
//                0x2A141DFF, 0xD04785FF, 0xB9306FFF, 0xE05B92FF, 0x883959FF, 0x986778FF, 0x8C2E55FF, 0x865867FF,
//                0xB32F68FF, 0xAE637DFF, 0x914B63FF, 0xE53C7FFF, 0xFE699DFF, 0xB42A61FF, 0x743148FF, 0xBC7087FF,
//        };
//
//        int[] BIG_DAWN = new int[] {
//                0x00000000, 0x000000FF, 0x010101FF, 0x131313FF, 0x252525FF, 0x272928FF, 0x302F2EFF, 0x373737FF,
//                0x3E3D3EFF, 0x42413FFF, 0x454444FF, 0x484647FF, 0x494949FF, 0x4A4B4BFF, 0x4D504FFF, 0x53524FFF,
//                0x555353FF, 0x575659FF, 0x595756FF, 0x595958FF, 0x5A5A5AFF, 0x5B5B5BFF, 0x5F5C5DFF, 0x616160FF,
//                0x646260FF, 0x636262FF, 0x626565FF, 0x686A69FF, 0x6E6E6EFF, 0x6E6F6EFF, 0x6F7072FF, 0x707171FF,
//                0x73716FFF, 0x73716FFF, 0x737270FF, 0x747272FF, 0x7C7C7BFF, 0x7C7E7FFF, 0x7E7E7EFF, 0x7F807FFF,
//                0x808080FF, 0x808080FF, 0x8B8A87FF, 0x8C8C8CFF, 0x8D8F8FFF, 0x939291FF, 0x929292FF, 0x939596FF,
//                0x969796FF, 0x98989AFF, 0x9D9C9AFF, 0xA1A09EFF, 0xA2A09EFF, 0xA3A2A1FF, 0xA4A4A4FF, 0xA7A6A8FF,
//                0xA6A6A6FF, 0xA6A8A6FF, 0xACA9A9FF, 0xA9ADACFF, 0xAEB1AEFF, 0xB2B0AFFF, 0xB3AFAFFF, 0xAEB1B1FF,
//                0xB0B3B2FF, 0xB5B4B6FF, 0xB3B5B6FF, 0xB6B6B6FF, 0xB9B6B8FF, 0xBABBBDFF, 0xBABDBBFF, 0xC0BFBDFF,
//                0xC0C2C3FF, 0xC5C7C5FF, 0xC9C9C9FF, 0xC9CCCCFF, 0xCFD1D3FF, 0xD5D3D0FF, 0xDBD8DAFF, 0xDBDBDBFF,
//                0xDADCDDFF, 0xDDDEDDFF, 0xE1E2E1FF, 0xE2E5E5FF, 0xE7E5E3FF, 0xE6E6E9FF, 0xEAEBE8FF, 0xEAECEDFF,
//                0xEDEDEDFF, 0xF1F4F4FF, 0xFFFFFFFF, 0xA36D7CFF, 0xB25773FF, 0xFAA0B9FF, 0xA67884FF, 0x6F545BFF,
//                0xF783A4FF, 0x7C2C46FF, 0x622638FF, 0xEC7E9BFF, 0xA23B5AFF, 0xF8D2DAFF, 0xEB8AA1FF, 0xDF869AFF,
//                0x9E5B6AFF, 0xB05E71FF, 0xE39EABFF, 0xE3396BFF, 0xFFC0CBFF, 0x987278FF, 0x98344DFF, 0x533238FF,
//                0xB0757FFF, 0x8E4755FF, 0xA56872FF, 0xAA868AFF, 0xE17B8AFF, 0x911437FF, 0xDE8893FF, 0xDA6576FF,
//                0xD98790FF, 0xE59199FF, 0x431B21FF, 0xF96E7FFF, 0xE5B5B7FF, 0xEA6D7AFF, 0xC7153FFF, 0xDD9498FF,
//                0xFE124EFF, 0xF3ABAEFF, 0xBD1039FF, 0x62393BFF, 0x41292AFF, 0xD13A4EFF, 0x7D6060FF, 0x7E2932FF,
//                0x8B2330FF, 0xFE1D49FF, 0xFF8287FF, 0xB04049FF, 0xE3ABABFF, 0xC78F8FFF, 0x573B3BFF, 0xAB7373FF,
//                0x8E4D4EFF, 0x923239FF, 0xBF3C46FF, 0x4D2A2BFF, 0xD05B60FF, 0xF93B4EFF, 0x8E5555FF, 0xB33A42FF,
//                0xC39E9DFF, 0x9F6362FF, 0xFF8181FF, 0x6E2A2AFF, 0xFF6262FF, 0x4A2423FF, 0xBF3F3FFF, 0xE5C0BDFF,
//                0xE67D77FF, 0x6E2927FF, 0xC07872FF, 0x551414FF, 0xE82129FF, 0xF32D30FF, 0xD5524AFF, 0x73413CFF,
//                0xCEA5A0FF, 0x462521FF, 0xD94336FF, 0x7F0000FF, 0xFF0000FF, 0xA5140AFF, 0xE38071FF, 0xEB3020FF,
//                0xDA2010FF, 0xC46556FF, 0xB95A4CFF, 0xA0695FFF, 0xC82E1CFF, 0xA97A71FF, 0x401811FF, 0xBA2B11FF,
//                0xD43C1DFF, 0xFF3C0AFF, 0xE59582FF, 0x621800FF, 0xBA452AFF, 0xBB9186FF, 0xF54617FF, 0xA04A34FF,
//                0xE26646FF, 0xF55A32FF, 0xFB7750FF, 0xD08A74FF, 0xD3603CFF, 0xDE633BFF, 0xCE7457FF, 0x451909FF,
//                0x9D3F1DFF, 0x846155FF, 0xFC682DFF, 0xF0895FFF, 0xD09D87FF, 0xE19B7DFF, 0xD45508FF, 0x9F4312FF,
//                0xEBAA8CFF, 0x673319FF, 0xF08651FF, 0xF5B99BFF, 0xC0693CFF, 0xC97A4FFF, 0xF6C8AFFF, 0xE67632FF,
//                0xE5A17AFF, 0x985D39FF, 0xA04B05FF, 0x412513FF, 0x5F3214FF, 0xF2B995FF, 0xFF9E5EFF, 0xEF8234FF,
//                0xED9860FF, 0xD88A54FF, 0x7F3F00FF, 0xFF7F00FF, 0xB45A00FF, 0xDA6E0AFF, 0xA37F66FF, 0xE8A471FF,
//                0x9F6B43FF, 0x311E0DFF, 0xDE863AFF, 0x89603EFF, 0xBF7F3FFF, 0xFFBF81FF, 0xCCB095FF, 0x916A44FF,
//                0x73573BFF, 0x3B2D1FFF, 0x8F7357FF, 0xDFBE9CFF, 0xCBAA89FF, 0xE3C7ABFF, 0xB18252FF, 0xD28A3AFF,
//                0xE78A0BFF, 0xD4B79AFF, 0xF7BB7BFF, 0xECB67EFF, 0xFFA53CFF, 0xF5C187FF, 0xC49E73FF, 0x7F6342FF,
//                0x755C3DFF, 0x9E8566FF, 0xFACD93FF, 0xCB954CFF, 0xAF9E87FF, 0xD08D27FF, 0xBE8729FF, 0xFEBF57FF,
//                0x8F774CFF, 0xD79B0FFF, 0xBC9C60FF, 0x8E8169FF, 0x84775DFF, 0xE9BA5BFF, 0x6A4E07FF, 0xEAC270FF,
//                0xFBBE25FF, 0xF3E5C5FF, 0xC5B694FF, 0xF6BD31FF, 0x6F5A2CFF, 0xEACF92FF, 0x897545FF, 0xEED9A4FF,
//                0xEDB80BFF, 0xD5B357FF, 0xEACC7CFF, 0xBDB088FF, 0xB69B4CFF, 0xF2DD9EFF, 0xE9C659FF, 0x7A735AFF,
//                0x8C805AFF, 0xB8A259FF, 0xBB9E39FF, 0xAB9C68FF, 0xCBB14CFF, 0xF7DA68FF, 0xFFD510FF, 0x3D3823FF,
//                0x493F11FF, 0xCEBA5FFF, 0xF5E8ABFF, 0xB8A446FF, 0xAC9400FF, 0x25210EFF, 0xF8E46DFF, 0x4D4824FF,
//                0xE6D55AFF, 0xFFEA4AFF, 0xCCC063FF, 0x7D773FFF, 0xF1E57BFF, 0x665F21FF, 0xBAB052FF, 0xCFC879FF,
//                0xE6E08DFF, 0xE0D952FF, 0xC1BF7CFF, 0x53500AFF, 0xEDEDC7FF, 0xDADAABFF, 0xFFFFBFFF, 0xC7C78FFF,
//                0xB5B572FF, 0x8F8F57FF, 0x414123FF, 0xA2A255FF, 0x73733BFF, 0xE9EBB1FF, 0xBFBF3FFF, 0xB1B10AFF,
//                0x626200FF, 0x7F7F00FF, 0xFFFF00FF, 0x969A5EFF, 0xAAAF3FFF, 0xAFB390FF, 0x8B915DFF, 0x787C5DFF,
//                0x7E845FFF, 0x5E633DFF, 0xA6B161FF, 0xA8B274FF, 0x454C10FF, 0xD1E64CFF, 0xECF4CCFF, 0x2D330DFF,
//                0xDFE9BDFF, 0x97AB46FF, 0x4F5E1DFF, 0x6F7F45FF, 0x849C4BFF, 0x465032FF, 0x858E74FF, 0xA1CB3AFF,
//                0x283405FF, 0xC8FF41FF, 0x191E0FFF, 0xC3DB96FF, 0xA6D542FF, 0x222D0EFF, 0x677159FF, 0xAABE8EFF,
//                0x6D962BFF, 0xACF332FF, 0x4A6624FF, 0x96DC19FF, 0x81BE19FF, 0x788B63FF, 0x8EBE55FF, 0xC7E3ABFF,
//                0xABC78FFF, 0x50653BFF, 0x96E034FF, 0x738F57FF, 0x263B09FF, 0xB8E18FFF, 0x4D6C2AFF, 0x6AA805FF,
//                0x98AA88FF, 0xBEEB97FF, 0x77C418FF, 0x9BF046FF, 0x73C805FF, 0x344528FF, 0x4E5A47FF, 0x587D3EFF,
//                0x2A3722FF, 0x3C6E14FF, 0x95EC5FFF, 0x62874FFF, 0xA2E97EFF, 0x54A423FF, 0x64AC3FFF, 0xC2F0AEFF,
//                0x204608FF, 0x9FBC94FF, 0x74F03CFF, 0x588D43FF, 0x3D622FFF, 0x487439FF, 0x8BBF7CFF, 0x71F246FF,
//                0x6AF243FF, 0x81AB76FF, 0x75CB5FFF, 0xC4DABEFF, 0x51624DFF, 0x53714CFF, 0x82B678FF, 0x5D6F5AFF,
//                0x73976CFF, 0xDBF5D7FF, 0x149605FF, 0x0B2009FF, 0x7DFF73FF, 0x14E60AFF, 0x007F00FF, 0x00FF00FF,
//                0x0AD70AFF, 0x0C5C0CFF, 0x00C514FF, 0x3FBF3FFF, 0x578F57FF, 0x73AB73FF, 0x3B573BFF, 0xAFFFAFFF,
//                0x283D28FF, 0xBCECBBFF, 0x8FC78FFF, 0x497149FF, 0x4BF05AFF, 0xA2D8A2FF, 0x4B634BFF, 0x506450FF,
//                0x043210FF, 0x57C665FF, 0x3A5A3DFF, 0x69816BFF, 0x6CBC76FF, 0x96AB97FF, 0x52EC6FFF, 0x45FF6EFF,
//                0x50A560FF, 0x5EBF70FF, 0x233726FF, 0x87B48EFF, 0x41E06EFF, 0x96B19BFF, 0x05B450FF, 0x3B7349FF,
//                0x5B8263FF, 0xD3EDD7FF, 0x88DC9CFF, 0x28422EFF, 0x79D892FF, 0x00DE6AFF, 0x648E6EFF, 0x64BC7DFF,
//                0x99D9A9FF, 0x64C082FF, 0x1D7E46FF, 0x1C8C4EFF, 0x5DD98CFF, 0x507D5FFF, 0x6FB386FF, 0x48D985FF,
//                0x558465FF, 0x86F5AFFF, 0x6D937AFF, 0x235037FF, 0xB3E9C7FF, 0xB4EECAFF, 0x1A8D58FF, 0x3DB378FF,
//                0x496956FF, 0x3CFEA5FF, 0x033B25FF, 0x46A575FF, 0x4AC089FF, 0xABE3C5FF, 0x4BE9A3FF, 0x16704BFF,
//                0x0F6946FF, 0x5DA481FF, 0x82C3A2FF, 0x438365FF, 0x156C4AFF, 0x75BA99FF, 0x0D3223FF, 0x2DEBA8FF,
//                0x7CC1A2FF, 0x386250FF, 0x3F6253FF, 0x0F7757FF, 0xA2FDD7FF, 0x06C491FF, 0x1C4A3AFF, 0x84BCA7FF,
//                0x6ED0ADFF, 0x6AFFCDFF, 0x15362BFF, 0x60E7BDFF, 0x4A8E78FF, 0x38D8ACFF, 0x79C7AEFF, 0x8BDCC4FF,
//                0x4D7569FF, 0x46A48CFF, 0xA0C5BBFF, 0x17C8A8FF, 0x8BB2A8FF, 0x4F6C65FF, 0x129880FF, 0x466E64FF,
//                0x366B5FFF, 0x54B6A0FF, 0x80EBD2FF, 0x92C8BBFF, 0x587770FF, 0x9DC0B7FF, 0x87B9AEFF, 0x123832FF,
//                0x4FC1B1FF, 0x81CAC0FF, 0x1E6C64FF, 0x65D2C6FF, 0x8DB4AFFF, 0x375552FF, 0x346662FF, 0x64BFB9FF,
//                0x08DED5FF, 0x2EFDF3FF, 0x93DAD5FF, 0xA1CCC9FF, 0x4BA4A0FF, 0x84F9F6FF, 0x54DAD7FF, 0x007F7FFF,
//                0x00FFFFFF, 0x3FBFBFFF, 0x318282FF, 0x3B7373FF, 0x64ABABFF, 0x5D9999FF, 0x8FC7C7FF, 0xBFFFFFFF,
//                0xABE3E3FF, 0xC7F1F1FF, 0x3EF9FDFF, 0x57ACAEFF, 0x055A5CFF, 0x7AA9AAFF, 0x4DEBF5FF, 0x466B6EFF,
//                0x7CB9BEFF, 0x99DAE0FF, 0x97E1E8FF, 0x668689FF, 0x07474DFF, 0x749498FF, 0x27656EFF, 0x234146FF,
//                0x55E6FFFF, 0x7BC2D0FF, 0x91EBFFFF, 0x286F81FF, 0x7DD7F0FF, 0x63AABEFF, 0x29758AFF, 0x85D2EAFF,
//                0x3A606DFF, 0x7CD1F0FF, 0x1B5F7AFF, 0x39819FFF, 0x00BFFFFF, 0x54879FFF, 0x92B0BFFF, 0x62B9E4FF,
//                0x60B1DCFF, 0x14516FFF, 0x5AC5FFFF, 0x109CDEFF, 0x7CB6DDFF, 0x49687EFF, 0x699DC3FF, 0x546D81FF,
//                0x7DA0BBFF, 0x2472A9FF, 0x57A6E1FF, 0x1F77B4FF, 0x118BDBFF, 0xABD9FFFF, 0x729ABEFF, 0x62778BFF,
//                0x2885D1FF, 0x4082BEFF, 0x8FC6FDFF, 0x4F8DC9FF, 0x57738FFF, 0x8FABC7FF, 0xABC7E3FF, 0x3B5773FF,
//                0x578FC7FF, 0x326496FF, 0x4AA4FFFF, 0x2E6094FF, 0x193A5DFF, 0x186ABDFF, 0x6899D6FF, 0x244976FF,
//                0x61758FFF, 0x2378DCFF, 0x467ABCFF, 0x007FFFFF, 0x3E6190FF, 0x0F77F1FF, 0x214F8BFF, 0x004A9CFF,
//                0x2E5DA0FF, 0x4A75B4FF, 0x457AC8FF, 0x4B7DC8FF, 0x4F73A7FF, 0x4280DFFF, 0xBED2F0FF, 0x367FF5FF,
//                0xA3BCE2FF, 0x2D3748FF, 0x3876E0FF, 0x162C52FF, 0x0F377DFF, 0x0C2148FF, 0x446092FF, 0x99AAC8FF,
//                0x4A5872FF, 0x4D85F1FF, 0x0F192DFF, 0x507FDCFF, 0x0052F6FF, 0x546178FF, 0x6087D5FF, 0x88B0FFFF,
//                0x4E7DE6FF, 0x00007FFF, 0x0000FFFF, 0x0010BDFF, 0x0E2D9EFF, 0xA8B9DCFF, 0x000315FF, 0xBAC6E0FF,
//                0x101CDAFF, 0x193496FF, 0x466BD5FF, 0x90B0FFFF, 0x2744E9FF, 0x4F608DFF, 0x4C71F8FF, 0x3245E9FF,
//                0x1A2358FF, 0x0F0F50FF, 0x34437EFF, 0x445ABAFF, 0xD0DAF8FF, 0x5F76D4FF, 0x4155D4FF, 0x8891AEFF,
//                0x7484C2FF, 0x4A5AFFFF, 0x3C3CF5FF, 0x8F98B9FF, 0x5766B5FF, 0x0E0742FF, 0x1D2253FF, 0xB8C4F5FF,
//                0x231094FF, 0x7483CFFF, 0x5E6CCDFF, 0x362BCBFF, 0x4B53D1FF, 0x5A63F3FF, 0x3F3FBFFF, 0x4245BFFF,
//                0x272967FF, 0x51556CFF, 0x3E4362FF, 0x323677FF, 0x5A6199FF, 0x4E5394FF, 0x393A88FF, 0x6065ACFF,
//                0x5549F8FF, 0x6B6FE8FF, 0x757AB7FF, 0x5C60B6FF, 0x757BC1FF, 0x3E3C97FF, 0x595D96FF, 0x3929A8FF,
//                0x6464D8FF, 0x5445E5FF, 0xA2A6D2FF, 0x5B5DA5FF, 0x8181FFFF, 0x1F1F3BFF, 0x5247CAFF, 0x989BEBFF,
//                0x7676CAFF, 0x4E35D0FF, 0x441EC4FF, 0x57578FFF, 0x494973FF, 0x6A62DAFF, 0x6458D9FF, 0x3B3B57FF,
//                0x6F6EADFF, 0x786EF0FF, 0x4F4B93FF, 0x6241F6FF, 0x8F8FC7FF, 0x613FF2FF, 0xABABE3FF, 0x15112EFF,
//                0x464464FF, 0x7456FFFF, 0x3F3286FF, 0x9D9BC5FF, 0x2C225BFF, 0x6356B5FF, 0x736EAAFF, 0x725AE5FF,
//                0x7B66E9FF, 0xBEB9FAFF, 0x5024BEFF, 0x6D49E9FF, 0x24213AFF, 0x857DBDFF, 0x392575FF, 0x815DFFFF,
//                0xA09BCCFF, 0x7342F4FF, 0x7E57F8FF, 0x582CBEFF, 0x3F3172FF, 0x1C0E3DFF, 0x6E49D7FF, 0xC1BAE6FF,
//                0x5010B0FF, 0xB2A9E0FF, 0x773DF1FF, 0x6B5F99FF, 0x56438EFF, 0x6010D0FF, 0x3C1B79FF, 0x7632EFFF,
//                0x582DACFF, 0x9E98B8FF, 0xB3A7E2FF, 0x784FD7FF, 0x524874FF, 0x6436BCFF, 0x8A82A6FF, 0x51486CFF,
//                0x5724AAFF, 0x6F47C0FF, 0x692FC7FF, 0x654D9EFF, 0x8B67DBFF, 0xAD9AE2FF, 0x7529E1FF, 0x7F00FFFF,
//                0x552C99FF, 0x231937FF, 0x6A19CFFF, 0x8666CBFF, 0x524670FF, 0x7D27EDFF, 0x7314DEFF, 0x5A4E74FF,
//                0x302545FF, 0x4E377AFF, 0x867AA2FF, 0x563E81FF, 0x9B8AC0FF, 0x491685FF, 0xBEA2F5FF, 0x7F6F9FFF,
//                0x8664C0FF, 0xB991FFFF, 0x8355C8FF, 0x8328E6FF, 0x50337AFF, 0x382651FF, 0xBDA9DFFF, 0xD7C3FAFF,
//                0x716388FF, 0x9C41FFFF, 0xCBB3F3FF, 0x8843D6FF, 0x4E346FFF, 0x401B67FF, 0xA24AFFFF, 0x8F40E2FF,
//                0x995FDCFF, 0xDBCCF1FF, 0x9D60E0FF, 0x671CA6FF, 0x150B1EFF, 0x8A37D6FF, 0x8732D2FF, 0xBE9DE4FF,
//                0x645872FF, 0x8975A1FF, 0x724D99FF, 0x8F57C7FF, 0x6A1AA5FF, 0x573B73FF, 0x925CC4FF, 0x73578FFF,
//                0x7E33BBFF, 0x56267EFF, 0xAB8FC7FF, 0x8C65AFFF, 0x6B19A2FF, 0xA648EDFF, 0xB891DAFF, 0x410062FF,
//                0x6D4A89FF, 0xBD62FFFF, 0xD7A5FFFF, 0x5E2A81FF, 0x8157A0FF, 0xA571CCFF, 0xB05BE8FF, 0x7D35AAFF,
//                0xDEC4F0FF, 0x320A46FF, 0x9D83AEFF, 0xA45ECEFF, 0x7515A3FF, 0x5A187BFF, 0xE1B1FFFF, 0xC194DBFF,
//                0xB89DC9FF, 0xA126DAFF, 0x9F03DCFF, 0xBD29FFFF, 0x9B2ECEFF, 0x8C14BEFF, 0x936CA8FF, 0xC988EBFF,
//                0x4B1562FF, 0x3D134FFF, 0xA759CAFF, 0x634472FF, 0x9D4CC1FF, 0xBC83D7FF, 0x65506DFF, 0xB648DFFF,
//                0x8A52A0FF, 0x551A6AFF, 0x110714FF, 0x623073FF, 0x9040ABFF, 0x562C64FF, 0x6A4676FF, 0xBF31E8FF,
//                0x723A83FF, 0xC155E0FF, 0x8C469FFF, 0x763687FF, 0xD244F7FF, 0x7F3B91FF, 0xD53AFAFF, 0xC6B0CBFF,
//                0x9C38B3FF, 0xE673FFFF, 0x251728FF, 0xBE8BC7FF, 0x81358FFF, 0x6A3874FF, 0x9C54A9FF, 0xA129B6FF,
//                0xDE9CE8FF, 0x5B1167FF, 0xDE3AF7FF, 0xD397DBFF, 0xB552C3FF, 0x2F1333FF, 0x79537EFF, 0xDFBBE3FF,
//                0xC726DBFF, 0xF8C6FCFF, 0x8D2997FF, 0xF28DFAFF, 0xAC89AEFF, 0x914097FF, 0xDD5AE5FF, 0x3D0C41FF,
//                0xE3C7E3FF, 0xAB5CAEFF, 0xF21FFDFF, 0xBF49C4FF, 0xBD10C5FF, 0x463246FF, 0xF8B4F8FF, 0xAB73ABFF,
//                0xFD81FFFF, 0x8F578FFF, 0xC264C3FF, 0xDA20E0FF, 0x3C233CFF, 0xC539C9FF, 0xF328F9FF, 0x724072FF,
//                0xD155D2FF, 0xAB57ABFF, 0x7F6C7EFF, 0xBF3FBFFF, 0x573356FF, 0xFF52FFFF, 0xCF33CFFF, 0x633062FF,
//                0x641464FF, 0x5D305CFF, 0xC45DC1FF, 0x7F007FFF, 0xF500F5FF, 0x725270FF, 0x211020FF, 0xDC30D7FF,
//                0xC671BFFF, 0xD185C9FF, 0xBA92B5FF, 0x684164FF, 0xD773CEFF, 0xC994C2FF, 0xA84A9FFF, 0xB73AACFF,
//                0xBC52B1FF, 0xDAA8D2FF, 0xEBACE1FF, 0x8B7387FF, 0xB21DA3FF, 0x9C0B8CFF, 0xE885D6FF, 0xEC64D5FF,
//                0xDA71C6FF, 0xF53AD9FF, 0xD5A6C9FF, 0x973185FF, 0xD499C5FF, 0xC78FB9FF, 0x907388FF, 0xFFDCF5FF,
//                0x826179FF, 0x22061DFF, 0x973E82FF, 0xF3A2DCFF, 0xEB90D0FF, 0xE28BC8FF, 0xA01982FF, 0x461C3BFF,
//                0xD197BEFF, 0xE9A0D0FF, 0x7D5C71FF, 0xE1B9D2FF, 0x60284FFF, 0x823C6BFF, 0xFF8CD8FF, 0xB53D90FF,
//                0xFAAEDCFF, 0xFF85D2FF, 0xA77392FF, 0x7D4066FF, 0xD0409EFF, 0x8C4571FF, 0x280A1EFF, 0xFCAAD9FF,
//                0x752558FF, 0xFF50BFFF, 0xFF6AC5FF, 0xD7A0BEFF, 0xF07EBFFF, 0xAB5C89FF, 0x895C74FF, 0xA25D82FF,
//                0xEDC4D8FF, 0xA3467BFF, 0xAA0D73FF, 0xDA76ABFF, 0xDC7AADFF, 0x381F2CFF, 0x6C4157FF, 0xCA3C8CFF,
//                0xC35A91FF, 0xDA4F9BFF, 0x662146FF, 0x90466BFF, 0xD9A0B9FF, 0xC87DA0FF, 0xAD487BFF, 0x70495AFF,
//                0xF188B8FF, 0xD77AA4FF, 0xFEBBD6FF, 0x321623FF, 0x551937FF, 0xFEB4D2FF, 0xC80078FF, 0xCD4F8BFF,
//                0xDF358CFF, 0x4B2837FF, 0xC85F8DFF, 0xCB4582FF, 0x934A68FF, 0xEC348DFF, 0x7A3B54FF, 0x3C0B23FF,
//                0xE8A8BEFF, 0xD3357DFF, 0x714C59FF, 0xDDB1C0FF, 0xBC8A9BFF, 0xCFAEB8FF, 0xFC3A8CFF, 0xE61E78FF,
//        };
//
//        System.arraycopy(BIG_DAWN, 0, PaletteReducer.BIG_AURORA, 0, 1024);
//    }

    public INoiseViewer(Clipboard clippy) {
        clipboard = clippy;
    }

    @Override
    public void create() {
        if(clipboard == null) clipboard = Gdx.app.getClipboard();

        noise.setWrapped(noises[noiseIndex]);
        noise.setFractalType(Noise.RIDGED_MULTI);

//        apng = new AnimatedPNG();
        if(Gdx.app.getType() != Application.ApplicationType.WebGL) {
            gif = new AnimatedGif();
            gif.setDitherAlgorithm(Dithered.DitherAlgorithm.WREN);
            gif.setDitherStrength(0.2f);
            gif.palette = new QualityPalette();
//            gif.fastAnalysis = false;
//            png = new FastPNG();
//            png.setCompression(2);
        }

//        colorList.toArray(gif.palette.paletteArray);
//
//        IntList g = ColorGradients.toRGBA8888(ColorGradients.appendGradientChain(new IntList(256), 256, Interpolation.smooth::apply,
//                // cool blue
//                DescriptiveColor.oklabByHSL(0.68f, 0.85f, 0.2f, 1f),
//                DescriptiveColor.oklabByHSL(0.70f, 0.95f, 0.4f, 1f),
//                DescriptiveColor.oklabByHSL(0.62f, 1f, 0.55f, 1f),
//                DescriptiveColor.oklabByHSL(0.65f, 0.7f, 0.8f, 1f)
//                // rosy
////                DescriptiveColor.oklabByHSL(0.98f, 0.85f, 0.2f, 1f),
////                DescriptiveColor.oklabByHSL(0.00f, 0.95f, 0.4f, 1f),
////                DescriptiveColor.oklabByHSL(0.02f, 1f, 0.55f, 1f),
////                DescriptiveColor.oklabByHSL(0.01f, 0.7f, 0.8f, 1f)
//        ));
//        g.toArray(gif.palette.paletteArray);

        startTime = TimeUtils.millis();
        renderer = new ImmediateModeRenderer20(width * height * 2, false, true, 0);
        ShaderProgram hslShader = new ShaderProgram(
                "attribute vec4 a_position;\n" +
                        "attribute vec4 a_color;\n" +
                        "uniform mat4 u_projModelView;\n" +
                        "varying vec4 v_col;\n" +
                        "void main() {\n" +
                        "   gl_Position = u_projModelView * a_position;\n" +
                        "   v_col = a_color;\n" +
                        "   v_col.a *= 255.0 / 254.0;\n" +
                        "   gl_PointSize = 1.0;\n" +
                        "}",
                "#ifdef GL_ES\n" +
                        "precision mediump float;\n" +
                        "#endif\n" +
                        "varying vec4 v_col;\n" +
                        "float barronSpline(float x) {\n" +
                        "    const float shape = 1.7;\n" +
                        "    const float turning = 0.9;\n" +
                        "    float d = turning - x;\n" +
                        "    return mix(\n" +
                        "      ((1. - turning) * (x - 1.)) / (1. - (x + shape * d)) + 1.,\n" +
                        "      (turning * x) / (1.0e-20 + (x + shape * d)),\n" +
                        "      step(0.0, d));\n" +
                        "}\n" +
                        "vec4 hsl2rgb(vec4 c)\n" +
                        "{\n" +
                        "    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n" +
                        "    vec3 p = abs(fract(barronSpline(c.x) + K.xyz) * 6.0 - K.www);\n" +
                        "    float v = (c.z + c.y * min(c.z, 1.0 - c.z));\n" +
                        "    return vec4(v * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), 2.0 * (1.0 - c.z / (v + 1e-10))), c.w);\n" +
                        "}" +
                        "void main() {\n" +
                        "   gl_FragColor = hsl2rgb(v_col);\n" +
                        "}");
        if(!hslShader.isCompiled())
            System.out.println("HSL Shader compilation failed: " + hslShader.getLog());
        renderer.setShader(hslShader);
//        System.out.println();
//        System.out.println(renderer.getShader().getVertexShaderSource());
//        System.out.println();
//        System.out.println(renderer.getShader().getFragmentShaderSource());
//        System.out.println();
        view = new ScreenViewport();
        InputAdapter input = new InputAdapter() {
            @Override
            public boolean keyUp(int keycode) {
                int s;
                long ls;
                switch (keycode) {
                    case SPACE: // pause
                        paused = !paused;
                        break;
                    case E: //earlier seed
                        ls = noise.getSeed() - 1;
                        noise.setSeed(ls);
                        System.out.println("Using seed " + ls);
                        break;
                    case S: //seed after
                        ls = noise.getSeed() + 1;
                        noise.setSeed(ls);
                        System.out.println("Using seed " + ls);
                        break;
                    case SLASH: //random seed
                        ls = Hasher.randomize3(noise.getSeed());
                        noise.setSeed(ls);
                        System.out.println("Using seed " + ls);
                        break;
                    case N: // noise type
                        noise.setWrapped(noises[noiseIndex = (noiseIndex + (UIUtils.shift() ? noises.length - 1 : 1)) % noises.length]);
                        break;
                    case ENTER:
                    case D: //dimension
                        divisions = (divisions + (UIUtils.shift() ? 9 : 1)) % 10;
                        break;
                        // commented out because changing this makes the looping break.
//                    case F: // frequency
//                        noise.setFrequency(freq *= (UIUtils.shift() ? 1.25f : 0.8f));
//                        break;
                    case R: // fRactal type
                        noise.setFractalType((noise.getFractalType() + (UIUtils.shift() ? 3 : 1)) & 3);
                        break;
                    case H: // higher octaves
                        noise.setFractalOctaves((octaves = octaves + 1 & 7) + 1);
                        break;
                    case L: // lower octaves
                        noise.setFractalOctaves((octaves = octaves + 7 & 7) + 1);
                        break;
                    case I: // interpolator
                        interpolatorIndex = (interpolatorIndex + (UIUtils.shift() ? interpolators.size() - 1 : 1)) % interpolators.size();
                        interpolator = interpolators.get(interpolatorIndex);
                        break;
                    case BACKSLASH: // fractal spiral mode, I don't know if there is a mnemonic
                        noise.setFractalSpiral(!noise.isFractalSpiral());
                        break;
                    case Y:
                        hueCycle = !hueCycle;
                        break;
                    case P: { // paste
                        if (clipboard.hasContents()) {
                            String paste = clipboard.getContents();
                            int last = paste.lastIndexOf('`');
                            if (last >= 1) {
                                Base base = Base.BASE10;
                                //9~`FoaN`1234567890`~-2520166047429742850~0.0625~3~2~0`~4~circleIn~-0.098345466~1.0~2.4474833~0.8675451~1.0~0.1~1712959125737
                                noiseIndex = (base.readInt(paste) % noises.length + noises.length) % noises.length;
                                noise.stringDeserialize(paste.substring(paste.indexOf('~') + 1));
                                divisions = base.readInt(paste, last + 2, last = paste.indexOf('~', last + 2));
                                interpolatorIndex = interpolators.indexOf(interpolator =
                                        Interpolations.get(paste.substring(last + 1, last = paste.indexOf('~', last + 1))));
                                hue = base.readFloat(paste, last + 1, last = paste.indexOf('~', last + 1));
                                variance = base.readFloat(paste, last + 1, last = paste.indexOf('~', last + 1));
                                a = base.readFloat(paste, last + 1, last = paste.indexOf('~', last + 1));
                                if(a <= 0) a = 1f;
                                b = base.readFloat(paste, last + 1, last = paste.indexOf('~', last + 1));
                                if(b <= 0) b = 1f;
                                hard = base.readFloat(paste, last + 1, last = paste.indexOf('~', last + 1));
                                if(hard <= 0) hard = 0f;
                                saturation = base.readFloat(paste, last + 1, last = paste.indexOf('~', last + 1));
                                if(saturation <= 0) saturation = 0f;
                                prettyPrint();
                            }
                        } else
                            System.out.println("Clipboard is empty!");
                    }
                    //`322420472~11~1~2~1~0~0~0~32829~64~63~-466088384~1701193279~164548413`~2~pow0_75~0.7793921~0.1937514~1.0~1.0~1700476003842
                    break;
                    case EQUALS:
                        centers.add(new Vector2());
                        break;
                    case MINUS:
                        centers.pop();
                        break;
                    case A: // analyze
                        prettyPrint();
                        break;
                    case Q: // quit
                    case ESCAPE: {
                        Gdx.app.exit();
                    }
                    break;
                }
                return true;
            }
        };
        Gdx.input.setInputProcessor(input);
    }
    public void prettyPrint() {
        System.out.println("Noise Tag: " + noise.getTag());
        System.out.println("Fractal Type: " + noise.getMode());
        System.out.println("Frequency: " + noise.getFrequency());
        System.out.println("Octaves: " + noise.getFractalOctaves());
        System.out.println("Seed: " + noise.getSeed());
        System.out.println("Fractal Spiral: " + noise.fractalSpiral);
        System.out.println("Divisions: " + divisions);
        System.out.println("Gradient Interpolator: " + interpolator.tag + " (index " + interpolatorIndex + ")");
        System.out.println("Hue: " + hue);
        System.out.println("Saturation: " + saturation);
        System.out.println("Gradient Variance: " + variance);
        System.out.println("Gradient Hardness: " + hard);
        System.out.println("Kumaraswamy a: " + a + ", b: " + b);
        System.out.println("Data for Copy/Paste: " + noiseIndex + "~" + noise.stringSerialize() + "~" + divisions + "~" + interpolator.tag + "~" + hue + "~" + variance + "~" + a + "~" + b + "~" + hard + "~"  + saturation + "~" + System.currentTimeMillis());
    }

    public void putMap() {
        if (Gdx.input.isKeyPressed(C))
            hue = (hue + 0.25f * (UIUtils.shift() ? -Gdx.graphics.getDeltaTime() : Gdx.graphics.getDeltaTime()));
        if (Gdx.input.isKeyPressed(V))
            variance = Math.max(0.001f, variance + 0.25f * (UIUtils.shift() ? -Gdx.graphics.getDeltaTime() : Gdx.graphics.getDeltaTime()));
        if (Gdx.input.isKeyPressed(A))
            hard = Math.min(Math.max(hard + 0.125f * (UIUtils.shift() ? -Gdx.graphics.getDeltaTime() : Gdx.graphics.getDeltaTime()), 0f), 1f);
        if (Gdx.input.isKeyPressed(Z))
            saturation = Math.min(Math.max(saturation + 0.125f * (UIUtils.shift() ? -Gdx.graphics.getDeltaTime() : Gdx.graphics.getDeltaTime()), 0f), 1f);
        if (Gdx.input.isKeyPressed(NUM_0))
            a = Math.max(0.001f, a + 0.25f * (UIUtils.shift() ? -Gdx.graphics.getDeltaTime() : Gdx.graphics.getDeltaTime()));
        if (Gdx.input.isKeyPressed(NUM_1))
            b = Math.max(0.001f, b + 0.25f * (UIUtils.shift() ? -Gdx.graphics.getDeltaTime() : Gdx.graphics.getDeltaTime()));
        renderer.begin(view.getCamera().combined, GL_POINTS);
        float bright, nf = noise.getFrequency(), counter = (paused ? startTime
                : TimeUtils.timeSinceMillis(startTime)) * 0x1p-10f / nf,
                c = counter * (1 + (divisions & 1));
        float hc = hue;
        if(hueCycle) hc = counter * 0x1p-8f;

        double aa = 1.0/a, bb = 1.0/b;

        final int cenSize = centers.size();

        if(cenSize == 1) {
            centers.get(0).set((width - 1f) * 0.5f, (height - 1f) * 0.5f);
        }
        else {
            for (int i = 0; i < cenSize; i++) {
                float rot = (counter * 0x1p-8f + i) / (float) cenSize;
                centers.get(i).set(TrigTools.cosTurns(rot) * width * 0.35f + (width - 1f) * 0.5f,
                        TrigTools.sinTurns(rot) * height * 0.35f + (height - 1f) * 0.5f);
            }
        }
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                float n = 0f, bSum = 0f;
                for (int cen = 0; cen < cenSize; cen++) {
                    int direction = 1 - ((~cenSize & cen & 1) << 1);

                    float distX = x - centers.get(cen).x; // x distance from center
                    float distY = y - centers.get(cen).y; // y distance from center
                    // this is the angle to get from the center to our current point, multiplies by the number of times the
                    // pattern needs to repeat (which is 3 + divisions), plus a slowly increasing value to make it rotate.
                    float theta = (TrigTools.atan2Turns(distY, distX) * (3 + divisions) + (c * 0x4p-8f)) * direction;
                    // not actually the length, but like it. It "should" use square root, but cube root looks better.
                    float len = MathTools.cbrt(distX * distX + distY * distY) * 4f;
//                float len = (float) Math.sqrt(distX * distX + distY * distY);
                    // this is used to expand each "pizza slice" of noise as it gets further from the center.
                    float shrunk = len / (3f + divisions);
                    // we need to subtract counter to make increasing time appear to "zoom in" forever. I don't know why.
                    len = (len - counter) * 0x1p-8f;
                    // can be ignored; when there are an even number of slices, this reverses every other slice.
                    int flip = -(MathUtils.floor(theta) & 1 & divisions) | 1;
                    // if the above found it needs to reverse a slice, it does so here.
                    theta *= flip;
                    float A, B, C, D; // these are used later, they get assigned the 4D position's x, y, z, w coordinates
                    // the interpolator is used to adjust brightness, like ramps or curves in an image editor.
                    bright = Math.min(Math.max(interpolator.apply(basicPrepare(
                            noise.getNoiseWithSeed(
                                    // A and B are given the angle going around the center, and get split into sin and cos.
                                    A = TrigTools.cosTurns(theta) * shrunk,
                                    B = TrigTools.sinTurns(theta) * shrunk,
                                    // C and D also get split, but are given the distance from the center going out.
                                    C = TrigTools.cosTurns(len) * 32f,
                                    D = TrigTools.sinTurns(len) * 32f,
                                    // the noise seed allows us to make a different "random" pattern by changing the seed.
                                    noise.getSeed())
                    )), 0), 1);
                    bSum += (float)Math.pow(1.0 - Math.pow(1.0 - bright, bb), aa) - 0.5f;
                    n += varianceNoise.getConfiguredNoise(A, B, C, D);
                }
//                bright = (float) TrigTools.atanUncheckedTurns(bSum - cenSize * 0.5f) * 2f + 0.5f;
//                bright = bSum / cenSize;
                bright = screenistic(bSum * 2f / cenSize);

                renderer.color(
//                        BitConversion.reversedIntBitsToFloat(hsl2rgb(
                                fract((n / (hard * Math.abs(n) + (1f - hard))) * variance + hc),
                                TrigTools.sin(1 + bright * 1.375f) * saturation,
                                TrigTools.sin(bright * 1.5f),
                                1f
//                        ))
                );
//                renderer.color(colorFloats[(int) (bright * 255.99f)]);
                renderer.vertex(x, y, 0);
            }
        }
        if (Gdx.input.isKeyJustPressed(W)) {
            if (Gdx.files.isLocalStorageAvailable()) {
                for (int ctr = 0; ctr < 256; ctr++) {
                    int ct = ctr * (1 + (divisions & 1));
                    if(hueCycle) hc = ctr * 0x1p-8f;
                    else hc = hue;
                    Pixmap p = new Pixmap(width, height, Pixmap.Format.RGBA8888);

                    if(cenSize == 1) {
                        centers.get(0).set((width - 1f) * 0.5f, (height - 1f) * 0.5f);
                    }
                    else {
                        for (int i = 0; i < cenSize; i++) {
                            float rot = (ctr * 0x1p-8f + i) / (float) cenSize;
                            centers.get(i).set(TrigTools.cosTurns(rot) * width * 0.35f + (width - 1f) * 0.5f,
                                    TrigTools.sinTurns(rot) * height * 0.35f + (height - 1f) * 0.5f);
                        }
                    }

                    for (int x = 0; x < width; x++) {
                        for (int y = 0; y < height; y++) {
                            float n = 0f, bSum = 0f;
                            for (int cen = 0; cen < cenSize; cen++) {
                                int direction = 1 - ((~cenSize & cen & 1) << 1);

                                float distX = x - centers.get(cen).x; // x distance from center
                                float distY = y - centers.get(cen).y; // y distance from center
                                // this is the angle to get from the center to our current point, multiplies by the number of times the
                                // pattern needs to repeat (which is 3 + divisions), plus a slowly increasing value to make it rotate.
                                float theta = (TrigTools.atan2Turns(distY, distX) * (3 + divisions) + (ct * 0x1p-8f)) * direction;
                                // not actually the length, but like it. It "should" use square root, but cube root looks better.
                                float len = MathTools.cbrt(distX * distX + distY * distY) * 4f;
//                float len = (float) Math.sqrt(distX * distX + distY * distY);
                                // this is used to expand each "pizza slice" of noise as it gets further from the center.
                                float shrunk = len / (3f + divisions);
                                // we need to subtract counter to make increasing time appear to "zoom in" forever. I don't know why.
                                len = (len - ctr) * 0x1p-8f;
                                // can be ignored; when there are an even number of slices, this reverses every other slice.
                                int flip = -(MathUtils.floor(theta) & 1 & divisions) | 1;
                                // if the above found it needs to reverse a slice, it does so here.
                                theta *= flip;
                                float A, B, C, D; // these are used later, they get assigned the 4D position's x, y, z, w coordinates
                                // the interpolator is used to adjust brightness, like ramps or curves in an image editor.
                                bright = Math.min(Math.max(interpolator.apply(basicPrepare(
                                        noise.getNoiseWithSeed(
                                                // A and B are given the angle going around the center, and get split into sin and cos.
                                                A = TrigTools.cosTurns(theta) * shrunk,
                                                B = TrigTools.sinTurns(theta) * shrunk,
                                                // C and D also get split, but are given the distance from the center going out.
                                                C = TrigTools.cosTurns(len) * 32f,
                                                D = TrigTools.sinTurns(len) * 32f,
                                                // the noise seed allows us to make a different "random" pattern by changing the seed.
                                                noise.getSeed())
                                )), 0), 1);
                                bSum += (float)Math.pow(1.0 - Math.pow(1.0 - bright, bb), aa) - 0.5f;
                                n += varianceNoise.getConfiguredNoise(A, B, C, D);
                            }
//                            bright = (float) TrigTools.atanUncheckedTurns(bSum - cenSize * 0.5f) * 2f + 0.5f;
//                            bright = bSum / cenSize;
                            bright = screenistic(bSum * 2f / cenSize);

                            p.setColor(
                                    hsl2rgb(//DescriptiveColor.toRGBA8888(DescriptiveColor.oklabByHCL(
                                            fract((n / (hard * Math.abs(n) + (1f - hard))) * variance + hc),
                                            TrigTools.sin(1 + bright * 1.375f) * saturation,
                                            TrigTools.sin(bright * 1.5f),
                                            1f))
//                            )
                            ;
                            p.drawPixel(x, y);
                        }
                    }
                    frames.add(p);
                }
//            float hue = (TimeUtils.millis() & 1023) * 0x1p-10f;
//            IntList g = ColorGradients.toRGBA8888(ColorGradients.appendGradientChain(new IntList(256), 256, Interpolation.smooth::apply,
//                    DescriptiveColor.oklabByHSL(0.05f + hue, 0.85f, 0.2f, 1f),
//                    DescriptiveColor.oklabByHSL(0.02f + hue, 0.95f, 0.4f, 1f),
//                    DescriptiveColor.oklabByHSL(0.10f + hue, 1f, 0.55f, 1f),
//                    DescriptiveColor.oklabByHSL(0.08f + hue, 0.7f, 0.8f, 1f)
//            ));
//            g.toArray(gif.palette.paletteArray);
//            colorList.toArray(gif.palette.paletteArray);
//                gif.palette.exact(colorList.items, colorList.size());

                Gdx.files.local("out/").mkdirs();
                String ser = noiseIndex + "~" + noise.stringSerialize() + "~" + divisions + "~" + interpolator.tag + "~" + hue + "~" + variance + "~" + a + "~" + b + "~" + hard + "~" + saturation + "~" + System.currentTimeMillis();
                prettyPrint();
                if(Gdx.app.getType() != Application.ApplicationType.WebGL)
                {
                    if(gif != null) {
                        gif.palette.analyzeReductive(frames);
//                        gif.palette.analyze(frames);
                        gif.write(Gdx.files.local("out/gif/" + ser + ".gif"), frames, 30);
                    }
                    if(png != null) {
                        for(int i = 0; i < frames.size; i++){
                            png.write(Gdx.files.local("out/png/"+ser+"/frame_" + i + ".png"), frames.get(i));
                        }
                    }
                }
//                if(apng != null) {
//                    for (int i = 0; i < frames.size; i++) {
//                        Pixmap frame = frames.get(i);
//                        frame.setBlending(Pixmap.Blending.None);
//                        int h = frame.getHeight(), w = frame.getWidth(), halfH = h >> 1, halfW = w >> 1;
//                        for (int y = 0; y < h; y++) {
//                            for (int x = 0; x < w; x++) {
//                                int p = frame.getPixel(x, y);
//                                frame.drawPixel(x, y, (p & 0xFFFFFF00) | Math.min(Math.max(
//                                        (int) (300 - 0x2.8p7 / (halfH * halfH) * ((x - halfW) * (x - halfW) + (y - halfH) * (y - halfH))), 0), 255));
//                            }
//
//                        }
//                    }
//                    apng.write(Gdx.files.local("out/apng/" + ser + ".png"), frames, 16);
//                }
//                try {
//                    png.write(Gdx.files.local("out/png/" + ser + ".png"), frames.get(0));
//                } catch (IOException ignored) {
//                }
                for (int i = 0; i < frames.size; i++) {
                    frames.get(i).dispose();
                }
                frames.clear();
            } else {
                String ser = noiseIndex + "~" + noise.stringSerialize() + "~" + divisions + "~" + interpolator.tag + "~" + hue + "~" + variance + "~" + a + "~" + b + "~" + hard + "~" + saturation + "~" + System.currentTimeMillis();
                System.out.println(ser);
                clipboard.setContents(ser);
            }
        }
        renderer.end();
    }

    @Override
    public void render() {
        Gdx.gl.glDisable(GL20.GL_BLEND);
        Gdx.graphics.setTitle(Gdx.graphics.getFramesPerSecond() + " FPS");
        ScreenUtils.clear(0f, 0f, 0f, 1f);
        putMap();
    }

    @Override
    public void resize(int width, int height) {
        super.resize(width, height);
        view.update(width, height, true);
        view.apply(true);
    }

    /**
     *
     * @param n centered on 0, so the midpoint of the domain should already be subtracted; min and max should be -1 and 1
     * @return a float between 0 and 1
     */
    public static float screenistic(float n) {
        return 1.1045f / (1f + BitConversion.intBitsToFloat((int)((1 << 23) * (Math.max(-126.0f, -4.328085f * n) + 126.94269504f)))) - 0.05177f;
    }

    /**
     * Mixes two values (each between 0 and 1) to get another value that will be lower if both inputs are low, higher
     * if both inputs are high, or balanced if both are in the center.
     * @param a between 0 and 1
     * @param b between 0 and 1
     * @return between 0 and 1
     */
    public static float screenistic(float a, float b) {
        return 1.1045f / (1f + BitConversion.intBitsToFloat((int)((1 << 23) * (Math.max(-126.0f, -4.328085f * (a + b - 1f)) + 126.94269504f)))) - 0.05177f;
    }

//    public void updateColor(float h) {
//        hue = h;
//        colorList.clear();
//        ColorGradients.toRGBA8888(ColorGradients.appendGradientChain(colorList, 256, Interpolations.smooth,
//                DescriptiveColor.oklabByHSL(variance * 0.05f + hue, 0.85f, 0.2f, 1f),
//                DescriptiveColor.oklabByHSL(variance * 0.02f + hue, 0.95f, 0.4f, 1f),
//                DescriptiveColor.oklabByHSL(variance * 0.10f + hue, 1f, 0.55f, 1f),
//                DescriptiveColor.oklabByHSL(variance * 0.08f + hue, 0.7f, 0.8f, 1f)
//        ));
//        for (int i = 0; i < 256; i++) {
//            colorFloats[i] = BitConversion.reversedIntBitsToFloat(colorList.get(i) & -2);
//        }
//    }
}
